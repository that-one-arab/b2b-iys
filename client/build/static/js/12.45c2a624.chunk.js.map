{"version":3,"sources":["views/hocloader/HocLoader.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","components/toaster/Toaster2.js","views/hedefler/AddGoal.js","views/hedefler/index.js","views/hedefler/Hedefler.js"],"names":["HocLoader","props","absolute","className","isLoading","role","children","relative","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","Toaster","i","color","body","position","show","autohide","fade","successObj","errorObj","AddGoal","modalOn","setModal","goals","dealer","month","year","toasters","triggerToaster","refetch","useState","services","setServices","service","setService","goal","setGoal","loading","setLoading","buttonDisabled","setButtonDisabled","goalFieldInvalid","setGoalFieldInvalid","verifyInputFields","changesArr","find","obj","service_id","Number","verifyGoalDoesntExist","resetInput","a","dealerID","user_id","dateString","fetch","method","headers","document","cookie","slice","JSON","stringify","userID","date","status","element","textObj","useEffect","res","json","fetchData","fetchServices","verifyFields","length","size","onClose","centered","xs","closeButton","row","lg","invalid","onChange","e","target","value","map","name","type","style","id","disabled","onClick","memo","currentMonth","crntMonth","Date","getMonth","mapGoalsData","data","hizmet","yapÄ±lan","done","hedef","for_date","for_user_id","goal_id","submit_date","success","fields","key","_style","width","DealersField","setDealer","dealers","setDealers","filteredData","filter","console","log","foundDealerObj","handleSetDealer","DateField","setMonth","setYear","months","dateArr","push","mapMonths","years","getFullYear","mapYears","defaultValue","Hedefler","setGoals","addGoalModal","setAddGoalModal","addToaster","fetchGoals","mappedData","undefined","toaster","items","tableFilter","hover","React"],"mappings":"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","file":"static/js/12.45c2a624.chunk.js","sourcesContent":["import \"./loader.css\"\r\n\r\nconst HocLoader = (props) => {\r\n    if (props.absolute)\r\n      return (\r\n        <div >\r\n          <div className={ props.isLoading ? \"loader loader-absolute\" : \"\"}>\r\n            <div className={ props.isLoading ? \"spinner-border\" : \"\"} role=\"status\">\r\n              {/* <span className=\"sr-only loader-icon\">Loading...</span> */}\r\n            </div>\r\n          </div>\r\n          {\r\n            props.children\r\n          }\r\n        </div>\r\n      )\r\n    else if (props.relative)\r\n      return (\r\n        <div className = \"relativePosition\">\r\n          <div className={ props.isLoading ? \"loader loader-relative\" : \"\"}>\r\n            <div className={ props.isLoading ? \"spinner-border\" : \"\"} role=\"status\">\r\n              {/* <span className=\"sr-only loader-icon\">Loading...</span> */}\r\n            </div>\r\n          </div>\r\n          {\r\n            props.children\r\n          }\r\n        </div>\r\n      )\r\n}\r\n\r\nexport default HocLoader;","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import {\r\n    CToaster,\r\n    CToast,\r\n    CToastBody,\r\n} from '@coreui/react';\r\n\r\nconst Toaster = ({color, body}, i) => {\r\n    return (\r\n        <CToaster position=\"top-right\" key = {i}>\r\n            <CToast show={true} autohide={3000} fade={true} color={color} className = \"applicationToaster\">\r\n                <CToastBody>{body}</CToastBody>\r\n            </CToast>\r\n        </CToaster>\r\n    )\r\n}\r\n\r\nexport default Toaster","import {\r\n    CCol,\r\n    CRow,\r\n    CModal,\r\n    CModalTitle,\r\n    CModalHeader,\r\n    CModalBody,\r\n    CButton,\r\n    CFormGroup,\r\n    CLabel,\r\n    CInput,\r\n    CSelect\r\n} from '@coreui/react'\r\nimport { useEffect, useState, memo } from 'react'\r\n\r\nimport Toaster from \"../../components/toaster/Toaster2\"\r\nimport HocLoader from '../hocloader/HocLoader'\r\n\r\nconst successObj = {\r\n    color: \"success\",\r\n    body: \"DeÄiÅikleriniz baÅarÄ±yla tamamlanmÄ±ÅtÄ±r!\"\r\n}\r\n\r\nconst errorObj = {\r\n    color: \"danger\",\r\n    body: \"Bir hata oldu, lÃ¼tfen daha sonra tekrar deneyin\"\r\n}\r\n\r\n\r\n\r\n// in this component, the component fetches services from the backend, and maps the in a select tag.\r\n// ideally I would like for the component to only map services that doesn't have a goal, by comparing them\r\n// to the goals array above.\r\nconst AddGoal = ({ modalOn, setModal, goals, dealer, month, year, toasters, triggerToaster, refetch}) => {\r\n    const [services, setServices] = useState([])\r\n    const [service, setService] = useState(\"0\")\r\n    const [goal, setGoal] = useState(0)\r\n    const [loading, setLoading] = useState(false)\r\n    const [buttonDisabled, setButtonDisabled] = useState(true)\r\n\r\n    const [goalFieldInvalid, setGoalFieldInvalid] = useState(false)\r\n\r\n    function verifyGoalDoesntExist() {\r\n        if (goals) {\r\n            if (goals.find(obj => obj.service_id === Number(service))) {\r\n                setGoalFieldInvalid(true)\r\n                return false\r\n            }\r\n            setGoalFieldInvalid(false)\r\n            return true\r\n        }\r\n    }\r\n\r\n    function verifyInputFields() {\r\n        let changesArr = [false, false]\r\n        if (service !== \"0\" && verifyGoalDoesntExist() === true)\r\n            changesArr[0] = true\r\n        else\r\n            changesArr[0] = false\r\n\r\n        if (Number(goal) >= 1)\r\n            changesArr[1] = true\r\n        else\r\n            changesArr[1] = false\r\n\r\n        return changesArr\r\n    }\r\n\r\n    function resetInput() {\r\n        setService({})\r\n        setGoal(0)\r\n    }\r\n\r\n    async function handleSubmit() {\r\n        const dealerID = dealer.user_id\r\n        const dateString = `${year}-${month}-01`\r\n        setLoading(true)\r\n        const res = await fetch(`/goal`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'authorization': `Bearer ${document.cookie.slice(8)} `\r\n            },\r\n            body: JSON.stringify({\r\n                userID: dealerID,\r\n                date: dateString,\r\n                service: service,\r\n                goal: goal\r\n            })\r\n        })\r\n        if (res.status === 200) {\r\n            triggerToaster([...toasters, { element: Toaster, textObj: successObj }])\r\n            resetInput()\r\n            setModal(false)\r\n        } else {\r\n            triggerToaster([...toasters, { element: Toaster, textObj: errorObj }])\r\n        }\r\n        setLoading(false)\r\n        refetch()\r\n    }\r\n\r\n    // fetch data use effect\r\n    useEffect(() => {\r\n        const fetchServices = async () => {\r\n            const res = await fetch(`/services?active=true` , {\r\n                headers: {\r\n                  'content-type': 'application/json',\r\n                  'authorization' :`Bearer ${document.cookie.slice(8)} `\r\n                }\r\n            })\r\n            if (res.status === 200) {\r\n                const fetchData = await res.json()\r\n                setServices(fetchData)\r\n            }\r\n        }\r\n        fetchServices()\r\n    }, [])\r\n\r\n    // useEffect for verifiyng user input\r\n    useEffect(() => {\r\n        const verifyFields = verifyInputFields()\r\n        for (let i = 0; i < verifyFields.length; i++) {\r\n            if (verifyFields[i] === false)\r\n                return setButtonDisabled(true)\r\n        }\r\n        return setButtonDisabled(false)\r\n        //eslint-disable-next-line\r\n    }, [service, goal])\r\n    return (\r\n        <CModal\r\n            size=\"lg\"\r\n            show={modalOn}\r\n            onClose={() => setModal(!modalOn)}\r\n            color=\"success\"\r\n            centered\r\n        >\r\n            <HocLoader relative isLoading={loading} >\r\n                <CRow>\r\n                    <CCol xs=\"12\" >\r\n                        <CModalHeader closeButton>\r\n                            <CModalTitle>Hedef ekle</CModalTitle>\r\n                        </CModalHeader>\r\n                        <CModalBody>\r\n                            <CFormGroup row>\r\n                                <CCol xs=\"12\" lg=\"1\">\r\n                                    <CLabel>Hizmet</CLabel>\r\n                                </CCol>\r\n                                <CCol xs=\"12\" lg=\"3\">\r\n                                    <CSelect invalid = {goalFieldInvalid} onChange = {e => setService(e.target.value)} >\r\n                                        <option value ={\"0\"} ></option>\r\n                                        {services && services.map(obj => {\r\n                                            return <option key={obj.service_id} value = {obj.service_id}>{obj.name}</option>\r\n                                        })}\r\n                                    </CSelect>\r\n                                </CCol>\r\n                                <CCol xs=\"12\" lg=\"1\">\r\n                                    <CLabel>Hedef</CLabel>\r\n                                </CCol>\r\n                                <CCol xs=\"12\" lg=\"2\">\r\n                                    <CInput type=\"number\" value={goal} onChange={e => setGoal(e.target.value)} />\r\n                                </CCol>\r\n                                <CCol xs=\"12\" lg=\"1\" >\r\n\r\n                                </CCol>\r\n                                <CCol xs=\"12\" lg=\"4\" style = {{position: \"relative\"}} >\r\n                                    <div id = \"AddGoal-modal-footer-div\" >\r\n                                        <CButton disabled={buttonDisabled} color=\"success\" onClick={handleSubmit}>Hedef ekle</CButton>\r\n                                        <CButton color=\"secondary\" onClick={() => { setModal(!modalOn); resetInput() }}>Kapat</CButton>\r\n                                    </div>\r\n                                </CCol>\r\n                            </CFormGroup>\r\n                        </CModalBody>\r\n                    </CCol>\r\n                </CRow>\r\n            </HocLoader>\r\n        </CModal>\r\n    )\r\n}\r\n\r\nexport default memo(AddGoal)","import React, { useEffect, useState, memo } from \"react\"\r\nimport { CSelect } from \"@coreui/react\"\r\nimport \"./hedefler.css\"\r\n\r\nexport function mapYears() {\r\n    let dateArr = []\r\n    for (let i = new Date().getFullYear(); i >= 2000; i--) {\r\n      dateArr.push(i)\r\n    }\r\n    return dateArr\r\n  }\r\n  \r\nexport function mapMonths() {\r\n    const firstMonth = 1\r\n    let dateArr = []\r\n    for (let i = 12; i >= firstMonth; i--) {\r\n      if(i < 10){\r\n        i = '0' + i;\r\n      }\r\n      dateArr.push(i)\r\n    }\r\n    return dateArr\r\n  }\r\n\r\n\r\nexport function currentYear() {\r\n    return new Date().getFullYear()\r\n}\r\n\r\nexport function currentMonth() {\r\n  const crntMonth = new Date().getMonth()+1\r\n  if (crntMonth < 10)\r\n    return '0' + crntMonth\r\n  return crntMonth\r\n}\r\n\r\nexport function mapGoalsData(data) {\r\n  return data.map(obj => {\r\n    return {\r\n      hizmet: obj.service,\r\n      yapÄ±lan: obj.done,\r\n      hedef: obj.goal,\r\n      for_date: obj.for_date,\r\n      for_user_id: obj.for_user_id,\r\n      service_id: obj.service_id,\r\n      goal_id: obj.goal_id,\r\n      submit_date: obj.submit_date,\r\n      success: obj.success\r\n    }\r\n  })\r\n}\r\n\r\nexport const fields = [\r\n  { key: 'hizmet', _style: { width: '80%'} },\r\n  { key: 'yapÄ±lan', _style: { width: '10%'} },\r\n  { key: 'hedef', _style: { width: '10%'} }\r\n  // {\r\n  //   key: 'show_details',\r\n  //   label: '',\r\n  //   _style: { width: '1%' },\r\n  //   sorter: false,\r\n  //   filter: false\r\n  // }\r\n]\r\n\r\n// NEEDS to select dealer as an object not as a name\r\nexport const DealersField = memo(({setDealer}) => {\r\n  const [dealers, setDealers] = useState([])\r\n\r\n  // finds the dealer object referencing the dealer's id, and calls setDealer with the value of the found object\r\n  function handleSetDealer(dealerID){\r\n    const foundDealerObj = dealers.find(obj => obj.user_id === dealerID)\r\n    if (foundDealerObj) setDealer(foundDealerObj)\r\n    else setDealer({})\r\n  }\r\n  \r\n  useEffect(() => {\r\n      const fetchData = async () => {\r\n          const res = await fetch(`/users`, {\r\n              headers: {\r\n                'content-type': 'application/json',\r\n                'authorization' :`Bearer ${document.cookie.slice(8)} `\r\n              }\r\n          })\r\n          if (res.status === 200) {\r\n              const fetchData = await res.json()\r\n              const filteredData = fetchData.filter(obj => obj.role === \"dealer\")\r\n              console.log('data: ', filteredData)\r\n              setDealers(filteredData)\r\n          }\r\n      }\r\n      fetchData()\r\n  }, [])\r\n  return (\r\n      <CSelect onChange = {(e) => handleSetDealer(e.target.value)} >\r\n          <option value = {\"0\"}></option>\r\n          {\r\n              dealers && dealers.map(dealer => <option key={dealer.user_id} value={dealer.user_id}>{dealer.name}</option>)\r\n          }\r\n      </CSelect>\r\n  )\r\n})\r\n\r\nexport const DateField = memo(({setMonth, setYear}) => {\r\n  const months = mapMonths()\r\n  const years = mapYears()\r\n  return (\r\n      <div id = \"date-fields-div\">\r\n          <CSelect onChange = {e => setMonth(e.target.value)} defaultValue = {currentMonth()} >\r\n              {months.map(month => <option value={month} key={month}>{month}</option>)}\r\n          </CSelect>\r\n          <p id = \"month-year-seperator-slash\" >-</p>\r\n          <CSelect onChange = {e => setYear(e.target.value)} >\r\n              {years.map(year => <option value={year} key={year}>{year}</option>)}\r\n          </CSelect>\r\n      </div>\r\n  )\r\n})","import React, { useEffect, useState } from \"react\"\r\nimport {\r\n    CCard,\r\n    CCardBody,\r\n    CFormGroup,\r\n    CCol,\r\n    CLabel,\r\n    CDataTable,\r\n    CButton\r\n} from \"@coreui/react\"\r\nimport \"./hedefler.css\"\r\nimport AddGoal from \"./AddGoal\"\r\nimport { currentYear, currentMonth, mapGoalsData, fields, DateField, DealersField } from \".\"\r\n\r\nconst Hedefler = () => {\r\n    const [dealer, setDealer] = useState({})\r\n    const [month, setMonth] = useState(currentMonth())\r\n    const [year, setYear] = useState(currentYear())\r\n    const [goals, setGoals] = useState([])\r\n    const [loading, setLoading] = useState(false)\r\n    const [addGoalModal, setAddGoalModal] = useState(false)\r\n    const [toasters, addToaster] = useState([])\r\n\r\n    const fetchGoals = async () => {\r\n        setLoading(true)\r\n        const res = await fetch(`/goal?userID=${dealer.user_id}&month=${month}&year=${year}` , {\r\n            headers: {\r\n              'content-type': 'application/json',\r\n              'authorization' :`Bearer ${document.cookie.slice(8)} `\r\n            }\r\n        })\r\n        if (res.status === 200) {\r\n            const data = await res.json()\r\n            const mappedData = mapGoalsData(data)\r\n            setGoals(mappedData)\r\n        }\r\n        setLoading(false)\r\n    }\r\n\r\n    useEffect(() => {\r\n        // NEEDS to handle dealer as an object not as a string\r\n        if (dealer.user_id !== undefined)\r\n            fetchGoals()\r\n        //eslint-disable-next-line\r\n    }, [dealer, month, year])\r\n    return (\r\n        <CCard>\r\n\r\n            {toasters && toasters.map((toaster, i) => ( toaster.element(toaster.textObj, i)))}\r\n\r\n            <AddGoal modalOn={addGoalModal} setModal={setAddGoalModal} toasters={toasters} triggerToaster={addToaster} refetch={fetchGoals} goals={goals} month={month} year={year} dealer={dealer} />\r\n\r\n            <CCardBody>\r\n                <CFormGroup row>\r\n                    <CCol xs = \"12\" lg = \"1\">\r\n                        <CLabel>Bayi</CLabel>\r\n                    </CCol>\r\n                    <CCol xs = \"12\" lg = \"3\" >\r\n                        <DealersField setDealer = {setDealer} />\r\n                    </CCol>\r\n                    <CCol xs = \"12\" lg = \"4\" ></CCol>\r\n\r\n                    <CCol xs = \"12\" lg = \"1\">\r\n                        <CLabel>Tarih</CLabel>\r\n                    </CCol>\r\n                    <CCol xs = \"12\" lg = \"2\" >\r\n                        <DateField setYear = {setYear} setMonth = {setMonth} />\r\n                    </CCol>\r\n                </CFormGroup>\r\n                <div id = \"add-goal-div-row\" >\r\n                    <CButton color = \"info\" id = \"add-goal-div-row-button\" \r\n                        onClick = {() => setAddGoalModal(true)} disabled = {dealer.user_id !== undefined ? false : true}\r\n                    >Hedef ekle</CButton>\r\n                </div>\r\n                <CDataTable\r\n                    items={goals}\r\n                    fields={fields}\r\n                    tableFilter\r\n                    loading = {loading}\r\n                    hover\r\n                    // clickableRows\r\n                    // onRowClick={(item) => { setModal(true); setModalData(item)}}\r\n                    // scopedSlots = {{\r\n                    // 'deÄeri':\r\n                    //     (item)=>(\r\n                    //     <td>\r\n                    //         <p style = {{color: \"green\"}} >{item.deÄeri} TL</p>\r\n                    //     </td>\r\n                    //     ),\r\n                    // 'show_details':\r\n                    //     (item, index)=>{\r\n                    //     return (\r\n                    //     <td className=\"py-2\">\r\n                    //         <CButton\r\n                    //             color=\"primary\"\r\n                    //             variant=\"outline\"\r\n                    //             shape=\"square\"\r\n                    //             size=\"sm\"\r\n                    //             onClick={() => {setSelectedOffer(item); setModifyOffer(true)}}\r\n                    //         >\r\n                    //             DeÄiÅtir\r\n                    //         </CButton>\r\n                    //     </td>\r\n                    //     )\r\n                    // }\r\n                    // }}\r\n                />\r\n            </CCardBody>\r\n        </CCard>\r\n    )\r\n}\r\n\r\nexport default React.memo(Hedefler)"],"sourceRoot":""}
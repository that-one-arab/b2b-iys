{"version":3,"sources":["views/hocloader/HocLoader.js","components/modals/Modal.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","components/toaster/Toaster2.js","views/yenibasvuru/index.js","views/yenibasvuru/YeniBasvuru.js"],"names":["HocLoader","props","absolute","className","isLoading","role","children","relative","Modal","dispatch","show","on","onClose","type","payload","color","centered","closeButton","header","body","onClick","modalOn","setModal","style","textAlign","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","Toaster","i","position","autohide","fade","successText","errorText","initialState","selectedService","selectedOffer","clientDescription","clientName","applicationImages","applicationImagesObjUrls","isServiceSelected","isOfferSelected","isDescriptionInputted","isClientNameInputted","areImagesInputted","areImagesNot3","areImagesDifferentFormat","modalTextObj","toasters","reducer","state","action","serviceID","Number","offerID","trim","images","length","console","log","toasterTextObj","element","textObj","objURLS","indexOf","objURL","URL","createObjectURL","push","ApplicationImages","row","md","xs","id","name","multiple","custom","onChange","e","target","files","htmlFor","variant","alt","maxWidth","maxHeight","src","Services","useState","services","setServices","fetchData","a","fetch","headers","document","cookie","slice","res","status","json","useEffect","value","map","service","service_id","Offers","selectedServiceID","offers","setOffers","fetching","setFetching","disabled","offer","offer_id","Activator","activator","setActivator","placeholder","YeniBasvuru","useReducer","inputFieldsNotEmpty","setInputFieldsNotEmpty","setModalOn","loading","setLoading","resetInput","onSubmit","formData","FormData","append","method","inputFields","verifyFields","toaster","rows","size","React","memo"],"mappings":"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","file":"static/js/16.794af98a.chunk.js","sourcesContent":["import \"./loader.css\"\r\n\r\nconst HocLoader = (props) => {\r\n    if (props.absolute)\r\n      return (\r\n        <div >\r\n          <div className={ props.isLoading ? \"loader loader-absolute\" : \"\"}>\r\n            <div className={ props.isLoading ? \"spinner-border\" : \"\"} role=\"status\">\r\n              {/* <span className=\"sr-only loader-icon\">Loading...</span> */}\r\n            </div>\r\n          </div>\r\n          {\r\n            props.children\r\n          }\r\n        </div>\r\n      )\r\n    else if (props.relative)\r\n      return (\r\n        <div className = \"relativePosition\">\r\n          <div className={ props.isLoading ? \"loader loader-relative\" : \"\"}>\r\n            <div className={ props.isLoading ? \"spinner-border\" : \"\"} role=\"status\">\r\n              {/* <span className=\"sr-only loader-icon\">Loading...</span> */}\r\n            </div>\r\n          </div>\r\n          {\r\n            props.children\r\n          }\r\n        </div>\r\n      )\r\n}\r\n\r\nexport default HocLoader;","import React from \"react\";\r\nimport { CModal, CModalHeader, CModalTitle, CModalFooter, CModalBody, CButton } from \"@coreui/react\"\r\n\r\nfunction Modal(props) {\r\n    if (props.dispatch)\r\n        return (\r\n            <CModal \r\n            show={props.on} \r\n            onClose={() => props.dispatch({type : \"MODAL_DISPLAY\", payload: {type: \"CLOSE\"}})}\r\n            color={props.color}\r\n            centered\r\n            >\r\n                <CModalHeader closeButton>\r\n                    <CModalTitle> {props.header} </CModalTitle>\r\n                </CModalHeader>\r\n                <CModalBody>\r\n                    <h5>{props.body}</h5>\r\n                </CModalBody>\r\n                <CModalFooter>\r\n                    <CButton color=\"secondary\" onClick={() => props.dispatch({type : \"MODAL_DISPLAY\", payload: {type: \"CLOSE\"}})}>Kapat</CButton>\r\n                </CModalFooter>\r\n            </CModal>\r\n        )\r\n    else\r\n        return (\r\n            <CModal \r\n            show={props.modalOn}\r\n            onClose={() => props.setModal(!props.modalOn)}\r\n            color={props.color}\r\n            centered\r\n            >\r\n                <CModalHeader closeButton>\r\n                    <CModalTitle> {props.header} </CModalTitle>\r\n                </CModalHeader>\r\n                <CModalBody>\r\n                    <h5 style = {{textAlign: \"center\"}}>{props.body}</h5>\r\n                </CModalBody>\r\n                <CModalFooter>\r\n                    <CButton color=\"secondary\" onClick={() => props.setModal(!props.modalOn)}>Kapat</CButton>\r\n                </CModalFooter>\r\n            </CModal>\r\n        )\r\n}\r\n\r\nexport default Modal","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import {\r\n    CToaster,\r\n    CToast,\r\n    CToastBody,\r\n} from '@coreui/react';\r\n\r\nconst Toaster = ({color, body}, i) => {\r\n    return (\r\n        <CToaster position=\"top-right\" key = {i}>\r\n            <CToast show={true} autohide={3000} fade={true} color={color} className = \"applicationToaster\">\r\n                <CToastBody>{body}</CToastBody>\r\n            </CToast>\r\n        </CToaster>\r\n    )\r\n}\r\n\r\nexport default Toaster","\r\n\r\n/////////// ************\r\n\r\n// The add toaster feature goes as follows, \r\n// I add a \"toasters\" key in initialState, and I initialize it as an array, then I verify the images input in the\r\n// \"LOAD_IMAGES\" action. if the verifications don't pass, the function adds a new element\r\n// to the \"toasters\" array. The element is an object, that contains {element: JSX, textObj: {color: \"\", body: \"\"}}\r\n// the main function checks if \"toasters\" array has elements or has new elements, then it renders those elements by\r\n// calling the \"element\" key as a function, and giving it \"textObj\" key as props and arguments. PRETTY NEAT! \r\n\r\n\r\n/////////// ***********\r\n\r\nimport Toaster from \"../../components/toaster/Toaster2\"\r\n\r\nconst successText = {\r\n    color: \"success\",\r\n    header: \"Başarılı\",\r\n    body: \"Başvurunuz gönderilmiştir\"\r\n}\r\n\r\nconst errorText = {\r\n    color: \"danger\",\r\n    header: \"HATA\",\r\n    body: \"Bir hata olmuştur, lütfen daha sonra tekrar deneyin\"\r\n}\r\n\r\nexport const initialState = {\r\n    selectedService: 0,\r\n    selectedOffer: 0,\r\n    clientDescription: \"\",\r\n    clientName: \"\",\r\n    applicationImages: [],\r\n    applicationImagesObjUrls: [],\r\n\r\n    isServiceSelected: false,\r\n    isOfferSelected: false,\r\n    isDescriptionInputted: false,\r\n    isClientNameInputted: false,\r\n    areImagesInputted: false,\r\n\r\n    areImagesNot3: false,\r\n    areImagesDifferentFormat: false,\r\n    modalTextObj: {\r\n        color: \"\",\r\n        header: \"\",\r\n        body: \"\"\r\n    },\r\n    toasters: []\r\n}\r\n\r\nexport const reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case \"SET_SERVICE\":\r\n            const serviceID = Number(action.payload)\r\n            let isServiceSelected = false\r\n            if (serviceID !== 0)\r\n                isServiceSelected = true\r\n            else\r\n                isServiceSelected = false\r\n            return {\r\n                ...state,\r\n                selectedService: serviceID,\r\n                isServiceSelected\r\n            }\r\n        \r\n        case \"SET_OFFER\":\r\n            const offerID = Number(action.payload)\r\n            let isOfferSelected = false\r\n            if (offerID)\r\n                isOfferSelected = true\r\n            else\r\n                isOfferSelected = false\r\n            return {\r\n                ...state,\r\n                selectedOffer: offerID,\r\n                isOfferSelected\r\n            }\r\n        \r\n        case \"SET_CLIENT_NAME\":\r\n            const clientName = action.payload\r\n            let isClientNameInputted = false\r\n            if (clientName.trim() === \"\")\r\n                isClientNameInputted = false\r\n            else\r\n                isClientNameInputted = true\r\n            return {\r\n                ...state,\r\n                clientName,\r\n                isClientNameInputted\r\n            }\r\n        \r\n        case \"SET_CLIENT_DESCRIPTION\":\r\n            const clientDescription = action.payload\r\n            let isDescriptionInputted = false\r\n            if (clientDescription.trim() === \"\")\r\n                isDescriptionInputted = false\r\n            else\r\n                isDescriptionInputted = true\r\n            return {\r\n                ...state,\r\n                clientDescription,\r\n                isDescriptionInputted\r\n            }\r\n        case \"LOAD_IMAGES\":\r\n            const images = action.payload\r\n            if (images) {\r\n                // display error toaster if images total is not 3\r\n                if (images.length !== 3) {\r\n                    console.log('images are not 3')\r\n                    const toasterTextObj = {\r\n                        color: \"warning\",\r\n                        body: \"Lütfen 3 adet resim seçiniz\"\r\n                    }\r\n                    return {\r\n                        ...state,\r\n                        areImagesNot3: true,\r\n                        applicationImages: [],\r\n                        applicationImagesObjUrls: [],\r\n                        areImagesInputted: false,\r\n                        toasters: [...state.toasters, {element: Toaster, textObj: toasterTextObj}]\r\n                    }\r\n                }\r\n\r\n                let objURLS = []\r\n                // loop through the images and store image object as temp url in objURLS array\r\n                for (let i = 0; i < images.length; i++) {\r\n                    // display error toaster if image is not pdf or jpg\r\n                    if (images[i].type.indexOf(\"image\") !== 0) {\r\n                        console.log('images are a different format')\r\n                        const toasterTextObj = {\r\n                            color: \"warning\",\r\n                            body: \"Lütfen seçeceğiniz dosyaları resim olduğundan emin olun\"\r\n                        }\r\n                        return {\r\n                            ...state,\r\n                            areImagesDifferentFormat: true,\r\n                            applicationImages: [],\r\n                            applicationImagesObjUrls: [],\r\n                            areImagesInputted: false,\r\n                            toasters: [...state.toasters, {element: Toaster, textObj: toasterTextObj}]\r\n                        }\r\n                    }\r\n\r\n                    const objURL = URL.createObjectURL(images[i])\r\n                    objURLS.push(objURL)\r\n                }\r\n                return {\r\n                    ...state,\r\n                    applicationImages: images,\r\n                    applicationImagesObjUrls: objURLS,\r\n                    areImagesNot3: false,\r\n                    areImagesDifferentFormat: false,\r\n                    areImagesInputted: true\r\n                }\r\n            }\r\n            break\r\n        case \"SET_MODAL_TEXT_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                modalTextObj: successText\r\n            }\r\n        case \"SET_MODAL_TEXT_FAILURE\":\r\n            return {\r\n                ...state,\r\n                modalTextObj: errorText\r\n            }\r\n        \r\n        case \"RESET_INPUT\":\r\n            return initialState\r\n        default:\r\n            return state\r\n    }\r\n}","import React, { useState, useEffect, useReducer } from 'react'\r\nimport {\r\n  CButton,\r\n  CCard,\r\n  CCardBody,\r\n  CCardFooter,\r\n  CCardHeader,\r\n  CCol,\r\n  CFormGroup,\r\n  CFormText,\r\n  CTextarea,\r\n  CInput,\r\n  CLabel,\r\n  CSelect,\r\n  CRow,\r\n  CInputFile\r\n} from '@coreui/react';\r\nimport CIcon from '@coreui/icons-react';\r\nimport Modal from \"../../components/modals/Modal\"\r\nimport HocLoader from \"../hocloader/HocLoader\"\r\nimport { initialState, reducer } from \".\"\r\n\r\nconst ApplicationImages = ({dispatch, applicationImages}) => {\r\n    return (\r\n        <>\r\n        <CFormGroup row>\r\n            <CCol md=\"3\">\r\n                <CLabel>Başvuru dosyaları</CLabel>\r\n            </CCol>\r\n            <CCol xs=\"12\" md=\"9\">\r\n                <CInputFile\r\n                    id=\"file-multiple-input\"\r\n                    name=\"file-multiple-input\"\r\n                    multiple\r\n                    custom\r\n                    onChange={(e) => dispatch({type: \"LOAD_IMAGES\", payload: e.target.files})}\r\n                />\r\n                <CLabel htmlFor=\"file-multiple-input\" variant=\"custom-file\">\r\n                    Dosyalarını seç\r\n                </CLabel>\r\n            </CCol>\r\n        </CFormGroup>\r\n        {\r\n            applicationImages.length !== 0 ?\r\n            <CFormGroup row>\r\n                <CCol md=\"4\">\r\n                    <img alt = \"\" style = {{maxWidth: \"200px\", maxHeight: \"200px\"}} src = {applicationImages[0]} />\r\n                </CCol>\r\n                <CCol md=\"4\">\r\n                    <img alt = \"\" style = {{maxWidth: \"200px\", maxHeight: \"200px\"}} src = {applicationImages[1]} />\r\n                </CCol>\r\n                <CCol md=\"4\">\r\n                    <img alt = \"\" style = {{maxWidth: \"200px\", maxHeight: \"200px\"}} src = {applicationImages[2]} />\r\n                </CCol>\r\n            </CFormGroup>\r\n            :\r\n            <CFormGroup row>\r\n                <CCol md=\"4\">\r\n                    <img alt=\"\" style={{ maxWidth: \"200px\", maxHeight: \"200px\" }} src=\"https://res.cloudinary.com/papyum/image/upload/v1629721581/iys/placeholder_fb7gch.png\" />\r\n                </CCol>\r\n                <CCol md=\"4\">\r\n                    <img alt=\"\" style={{ maxWidth: \"200px\", maxHeight: \"200px\" }} src=\"https://res.cloudinary.com/papyum/image/upload/v1629721581/iys/placeholder_fb7gch.png\" />\r\n                </CCol>\r\n                <CCol md=\"4\">\r\n                    <img alt=\"\" style={{ maxWidth: \"200px\", maxHeight: \"200px\" }} src=\"https://res.cloudinary.com/papyum/image/upload/v1629721581/iys/placeholder_fb7gch.png\" />\r\n                </CCol>\r\n            </CFormGroup>\r\n        }\r\n        </>\r\n    )\r\n}\r\n\r\nconst Services = ({selectedService, dispatch}) => {\r\n    const [services, setServices] = useState([])\r\n    const fetchData = async () => {\r\n        const res = await fetch('/services', {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'authorization': `Bearer ${document.cookie.slice(8)} `\r\n            }\r\n        })\r\n        if (res.status === 200) {\r\n            const fetchData = await res.json()\r\n            setServices(fetchData)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchData()\r\n        //eslint-disable-next-line\r\n    }, [])\r\n\r\n    return (\r\n        <CFormGroup row>\r\n            <CCol md=\"3\">\r\n                <CLabel htmlFor=\"select\">Verilen Hizmet</CLabel>\r\n            </CCol>\r\n            <CCol xs=\"12\" md=\"9\">\r\n                <CSelect value={selectedService} custom name=\"select\" id=\"select\" onChange={(e) => dispatch({type: \"SET_SERVICE\", payload: e.target.value})} >\r\n                    <option value = {0}></option>\r\n                    {\r\n                        services && services.map(service => {\r\n                            return <option key = {service.service_id} value = {service.service_id} >{service.name}</option>\r\n                        })\r\n                    }\r\n                </CSelect>\r\n                <CFormText>Sağlamak istediğiniz hizmet</CFormText>\r\n            </CCol>\r\n        </CFormGroup>\r\n    )\r\n}\r\n\r\nconst Offers = ({dispatch, isServiceSelected, selectedServiceID, selectedOffer }) => {\r\n    const [offers, setOffers] = useState([])\r\n    const [fetching, setFetching] = useState(true)\r\n    const handleInputDisabled = () => {\r\n        if(isServiceSelected === false && fetching === false)\r\n            return true\r\n        else if (fetching === true)\r\n            return true\r\n        else\r\n            return false\r\n    }\r\n    const handleServicesWithNoOffers = () => {\r\n        if (isServiceSelected === true && offers.length === 0)\r\n            return <option value = {0}>Bu hizmete kampanya bulunmuyor</option>\r\n        else return <option> </option>\r\n    }\r\n    const fetchData = async () => {\r\n        setFetching(true)\r\n        const res = await fetch(`/service/${selectedServiceID}`, {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'authorization': `Bearer ${document.cookie.slice(8)} `\r\n            }\r\n        })\r\n        if (res.status === 200) {\r\n            const fetchData = await res.json()\r\n            setOffers(fetchData)\r\n        } else if (res.status === 406)\r\n            setOffers([])\r\n        setFetching(false)\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isServiceSelected)\r\n            fetchData()\r\n        else\r\n            setOffers([])\r\n        //eslint-disable-next-line\r\n    }, [isServiceSelected, selectedServiceID])\r\n\r\n    return (\r\n        <CFormGroup row>\r\n        <CCol md=\"3\">\r\n            <CLabel htmlFor=\"select\" >Kampanya Seçimi</CLabel>\r\n        </CCol>\r\n        <CCol xs=\"12\" md=\"9\">\r\n            <CSelect disabled = {handleInputDisabled()} \r\n                value={selectedOffer} onChange={(e) => dispatch({type: \"SET_OFFER\", payload: e.target.value})} >\r\n                {handleServicesWithNoOffers()}\r\n                {\r\n                    offers && offers.map(offer => {\r\n                        return <option key = {offer.offer_id} value = {offer.offer_id} >{offer.name}</option>\r\n                    })\r\n                }\r\n            </CSelect>\r\n            <CFormText>Seçmek istediğiniz kampanya</CFormText>\r\n        </CCol>\r\n        </CFormGroup>\r\n    )\r\n}\r\n\r\nconst Activator = () => {\r\n    const [activator, setActivator] = useState(\"\")\r\n    const fetchData = async () => {\r\n        const res = await fetch('/activator', {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'authorization': `Bearer ${document.cookie.slice(8)} `\r\n            }\r\n        })\r\n        if (res.status === 200) {\r\n            const fetchData = await res.json()\r\n            setActivator(fetchData.name)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchData()\r\n    }, [])\r\n\r\n    return (\r\n        <CFormGroup row>\r\n            <CCol md=\"3\">\r\n                <CLabel htmlFor=\"disabled-input\">Aktivasyon</CLabel>\r\n            </CCol>\r\n            <CCol xs=\"12\" md=\"9\">\r\n                <CInput id=\"disabled-input\" name=\"disabled-input\" placeholder={activator} disabled />\r\n                <CFormText>Sorumlu aktivasyon kişi</CFormText>\r\n            </CCol>\r\n        </CFormGroup>\r\n    )\r\n}\r\n\r\nconst YeniBasvuru = () => {\r\n\r\n    const [state, dispatch] = useReducer(reducer, initialState)\r\n    // Forms's controlled input fields' values\r\n    const { selectedService, selectedOffer, clientDescription, clientName, applicationImages } = state\r\n\r\n    // Form's other values that control the flow of the form itself\r\n    const { isServiceSelected, isOfferSelected, isDescriptionInputted, isClientNameInputted, applicationImagesObjUrls, areImagesInputted, toasters, modalTextObj } = state\r\n\r\n    const [inputFieldsNotEmpty, setInputFieldsNotEmpty] = useState(true)\r\n    const [modalOn, setModalOn] = useState(false)\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    const resetInput =() => {\r\n        dispatch({type: \"RESET_INPUT\"})\r\n    }\r\n\r\n    const onSubmit = async () => {\r\n        setLoading(true)\r\n        const formData = new FormData()\r\n\r\n        formData.append(\"selectedService\", selectedService)\r\n        formData.append(\"selectedOffer\", selectedOffer)\r\n        formData.append(\"clientDescription\", clientDescription)\r\n        formData.append(\"clientName\", clientName)\r\n        for (let i = 0; i < applicationImages.length; i++) {\r\n            formData.append(\"image\", applicationImages[i])\r\n        }\r\n        const res = await fetch(\"/applications\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'authorization' :`Bearer ${document.cookie.slice(8)} `\r\n            },\r\n            body: formData\r\n        })\r\n        if (res.status === 200) {\r\n            setModalOn(true)\r\n            resetInput()\r\n            dispatch({type: \"SET_MODAL_TEXT_SUCCESS\"})\r\n        } else {\r\n            dispatch({type: \"SET_MODAL_TEXT_FAILURE\"})\r\n            setModalOn(true)\r\n        }\r\n        setLoading(false)\r\n    }\r\n\r\n    useEffect(() => {\r\n        const verifyFields = () => {\r\n            const inputFields = [isServiceSelected, isOfferSelected, isDescriptionInputted, isClientNameInputted, areImagesInputted]\r\n            for (let i = 0; i < inputFields.length; i++) {\r\n                if (inputFields[i] === false) {\r\n                    return true\r\n                }\r\n                \r\n            }\r\n            return false\r\n        }\r\n        setInputFieldsNotEmpty(verifyFields())\r\n    }, [isServiceSelected, isOfferSelected, isDescriptionInputted, isClientNameInputted, areImagesInputted])\r\n\r\n    return (\r\n        <CRow className=\"d-flex justify-content-center\">\r\n        {/* I'm mapping the toasters from toasters array, each element is an object, object has: element, textObj, and \r\n            for every element in the array I'm calling the element's \"element\", which is a function that returns a react\r\n            element, and giving it \"textObj\" as props, and passing index as second argument. \r\n        */}\r\n        {toasters && toasters.map((toaster, i) => ( toaster.element(toaster.textObj, i)))}\r\n        <Modal modalOn = {modalOn} setModal = {setModalOn} color = {modalTextObj.color} header = {modalTextObj.header} body = {modalTextObj.body} />\r\n            <CCol xs=\"12\" md=\"8\">\r\n                <HocLoader relative isLoading = {loading}>\r\n                <CCard>\r\n                    <CCardHeader className=\"basvuruFormHeader\">\r\n                        Yeni Başvuru Sayfası\r\n                    </CCardHeader>\r\n                    <CCardBody>\r\n                            <Activator />\r\n\r\n                            <Services dispatch = {dispatch} selectedService = {selectedService} />\r\n                            \r\n                            <Offers dispatch = {dispatch} isServiceSelected = {isServiceSelected} selectedServiceID = {selectedService} />\r\n\r\n                            <CFormGroup row>\r\n                                <CCol md=\"3\">\r\n                                    <CLabel htmlFor=\"textarea-input\">Açıklama</CLabel>\r\n                                </CCol>\r\n                                <CCol xs=\"12\" md=\"9\">\r\n                                    <CTextarea\r\n                                        name=\"textarea-input\"\r\n                                        id=\"textarea-input\"\r\n                                        rows=\"9\"\r\n                                        placeholder=\"İşlemle alakalı ekstra detaylarınızı buraya yazın\"\r\n                                        value={clientDescription}\r\n                                        onChange={(e) => dispatch({type: \"SET_CLIENT_DESCRIPTION\", payload: e.target.value})}\r\n                                    />\r\n                                    <CFormText>İşlemle alakalı açıklamanız</CFormText>\r\n                                </CCol>\r\n                            </CFormGroup>\r\n\r\n                            <CFormGroup row>\r\n                                <CCol md=\"3\">\r\n                                    <CLabel htmlFor=\"text-input\">Müşteri</CLabel>\r\n                                </CCol>\r\n                                <CCol xs=\"12\" md=\"9\">\r\n                                    <CInput value={clientName} id=\"text-input\" name=\"text-input\" placeholder=\"\" onChange={(e) => dispatch({type: \"SET_CLIENT_NAME\", payload: e.target.value})} />\r\n                                    <CFormText>müşterinin isim soyisimi</CFormText>\r\n                                </CCol>\r\n                            </CFormGroup>\r\n                            <ApplicationImages dispatch = {dispatch} applicationImages = {applicationImagesObjUrls} />\r\n                    </CCardBody>\r\n                    <CCardFooter>\r\n                        <CButton type=\"submit\" size=\"sm\" color=\"primary\" onClick={onSubmit} disabled = {inputFieldsNotEmpty} ><CIcon name=\"cil-scrubber\" /> Gönder</CButton>\r\n                        <CButton type=\"reset\" size=\"sm\" color=\"danger\" onClick={resetInput}  ><CIcon name=\"cil-ban\" /> Resetle</CButton>\r\n                    </CCardFooter>\r\n                </CCard>\r\n                </HocLoader>\r\n            </CCol>\r\n        </CRow>\r\n    )\r\n}\r\n\r\nexport default React.memo(YeniBasvuru)"],"sourceRoot":""}
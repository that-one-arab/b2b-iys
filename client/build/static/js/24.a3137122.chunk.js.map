{"version":3,"sources":["components/modals/Modal.js","components/index.js","views/basvurulargoruntule/BasvuruDetay.js"],"names":["Modal","props","dispatch","show","on","onClose","type","payload","color","centered","closeButton","header","body","onClick","modalOn","setModal","style","textAlign","mapDataToTurkish","fetchData","map","obj","submitDate","Date","submit_time","statusChangeDate","status_change_date","lastChangeDate","last_change_date","submitProcessNum","status","ID","id","İsim","client_name","Tarih","toISOString","slice","Hizmet","service_name","Kampanya","offer_name","Açıklama","description","Statü","salesRepDetails","sales_rep_details","finalSalesRepDetails","final_sales_rep_details","imageURLS","image_urls","getBadge","mapRoleToTurkish","BasvuruDetay","details","match","applicationID","params","setUserDetails","a","fetch","method","headers","document","cookie","res","json","data","mappedData","updateApp","statusChange","sp","urlString","JSON","stringify","sdDetay","setModalDetails","modalSuccess","modalFailure","useState","setSdDetay","modal","modalDetails","userDetails","history","useHistory","useEffect","className","xs","sm","backgroundColor","setHeaderColor","active","block","push","row","lg","placeholder","readOnly","Tip","rows","onChange","e","target","value","elm","i","md","href","rel","alt","maxWidth","maxHeight","cursor","src","size","renderBasvuruDetayFooter"],"mappings":"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","file":"static/js/24.a3137122.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { CModal, CModalHeader, CModalTitle, CModalFooter, CModalBody, CButton } from \"@coreui/react\"\r\n\r\nfunction Modal(props) {\r\n    if (props.dispatch)\r\n        return (\r\n            <CModal \r\n            show={props.on} \r\n            onClose={() => props.dispatch({type : \"MODAL_DISPLAY\", payload: {type: \"CLOSE\"}})}\r\n            color={props.color}\r\n            centered\r\n            >\r\n                <CModalHeader closeButton>\r\n                    <CModalTitle> {props.header} </CModalTitle>\r\n                </CModalHeader>\r\n                <CModalBody>\r\n                    <h5>{props.body}</h5>\r\n                </CModalBody>\r\n                <CModalFooter>\r\n                    <CButton color=\"secondary\" onClick={() => props.dispatch({type : \"MODAL_DISPLAY\", payload: {type: \"CLOSE\"}})}>Kapat</CButton>\r\n                </CModalFooter>\r\n            </CModal>\r\n        )\r\n    else\r\n        return (\r\n            <CModal \r\n            show={props.modalOn}\r\n            onClose={() => props.setModal(!props.modalOn)}\r\n            color={props.color}\r\n            centered\r\n            >\r\n                <CModalHeader closeButton>\r\n                    <CModalTitle> {props.header} </CModalTitle>\r\n                </CModalHeader>\r\n                <CModalBody>\r\n                    <h5 style = {{textAlign: \"center\"}}>{props.body}</h5>\r\n                </CModalBody>\r\n                <CModalFooter>\r\n                    <CButton color=\"secondary\" onClick={() => props.setModal(!props.modalOn)}>Kapat</CButton>\r\n                </CModalFooter>\r\n            </CModal>\r\n        )\r\n}\r\n\r\nexport default Modal","export const mapDataToTurkish = (fetchData) => {\r\n    return fetchData.map(obj => {\r\n        let submitDate = new Date(obj.submit_time)\r\n        let statusChangeDate = new Date(obj.status_change_date)\r\n        let lastChangeDate = new Date(obj.last_change_date)\r\n        let submitProcessNum = 0\r\n        let status = \"\"\r\n        if (obj.status === \"approved\") {\r\n          submitProcessNum = 3\r\n          status = \"Onaylandı\"\r\n        }\r\n        else if (obj.status === \"rejected\") {\r\n          submitProcessNum = 3\r\n          status = \"İptal\"\r\n        }\r\n        else if (obj.status === \"processing\") {\r\n          submitProcessNum = 2\r\n          status = \"İşleniyor\"\r\n        }\r\n        else if (obj.status === \"sent\") {\r\n          status = \"Gönderildi\"\r\n          submitProcessNum = 1\r\n        }\r\n        return {\r\n            ID: obj.id,\r\n            İsim: obj.client_name,\r\n            Tarih: submitDate.toISOString().slice(0, 10),\r\n            Hizmet: obj.service_name,\r\n            Kampanya: obj.offer_name,\r\n            Açıklama: obj.description,\r\n            Statü: status,\r\n            salesRepDetails: obj.sales_rep_details ? obj.sales_rep_details : \"\",\r\n            statusChangeDate: statusChangeDate ? statusChangeDate.toISOString().slice(0, 10) : null,\r\n            finalSalesRepDetails: obj.final_sales_rep_details ? obj.final_sales_rep_details : \"\",\r\n            lastChangeDate: lastChangeDate ? lastChangeDate.toISOString().slice(0, 10) : null,\r\n            submitProcessNum,\r\n            imageURLS: obj.image_urls ? obj.image_urls : null\r\n          }\r\n      })\r\n}\r\n\r\nexport const getBadge = (status)=>{\r\n    switch (status) {\r\n       case 'Onaylandı': return 'success'\r\n       case 'İşleniyor': return 'warning'\r\n       case 'İptal': return 'danger'\r\n       case 'Gönderildi': return 'secondary'\r\n       default: return 'primary'\r\n    }\r\n  }\r\n\r\nexport const mapRoleToTurkish = (status)=>{\r\n  switch (status) {\r\n      case 'dealer': return 'Bayi'\r\n      case 'sales_assistant': return 'Satış Destek'\r\n      case 'sales_assistant_chef': return 'Satış Destek Şefi'\r\n      case 'admin': return 'Admin'\r\n      default: return ''\r\n  }\r\n}","import React, { useEffect, useState } from 'react'\r\nimport { CCard, CCardBody, CCardHeader, CCol, CRow, CFormGroup, CLabel, CInput, CTextarea, CButton } from '@coreui/react'\r\nimport \"./basvurudetay.css\"\r\nimport { useHistory } from 'react-router-dom'\r\nimport Modal from \"../../components/modals/Modal\"\r\nimport { mapDataToTurkish } from '../../components/index'\r\n\r\nconst BasvuruDetay = ({match}) => {\r\n  const applicationID = match.params.id\r\n\r\n  const fetchData = async (setUserDetails) => {\r\n    const res = await fetch(`/applications/${applicationID}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'content-type': 'application/json',\r\n        'authorization' :`Bearer ${document.cookie.slice(8)} `\r\n      }\r\n    })\r\n    if (res.status === 200) {\r\n      const data = await res.json()\r\n      const mappedData = mapDataToTurkish(data)\r\n      setUserDetails(mappedData[0])\r\n    }\r\n  }\r\n\r\n  const renderBasvuruDetayFooter = (details) => {\r\n    // if the application is on Hold (first status change)\r\n    if (details.submitProcessNum === 2) {\r\n      return (\r\n        <div id = \"basvuruDetay-footerButtons\">\r\n          {/* Here \"true\" in updateApp refers to sp optional parameter, if true it modifies the urlString in fetch */}\r\n          <CButton onClick = {() => updateApp(\"rejected\", true)} size=\"md\" color=\"danger\"><i className=\"fas fa-ban\"></i> İPTAL</CButton>\r\n          <CButton onClick = {()=> updateApp(\"approved\", true)} size=\"md\" color=\"success\" className = \"\">\r\n          <i className=\"fas fa-check-circle\"></i> ONAYLA</CButton>\r\n        </div>\r\n      )\r\n    }\r\n    // if the applications has been approved or denied (second status change)\r\n    else if (details.submitProcessNum === 3) {\r\n      return null\r\n    // else return first process submission\r\n    } else {\r\n      return (\r\n        <div id = \"basvuruDetay-footerButtons\">\r\n          <CButton onClick = {() => updateApp(\"rejected\")} size=\"md\" color=\"danger\"><i className=\"fas fa-ban\"></i> İPTAL</CButton>\r\n          <CButton onClick = {()=> updateApp(\"processing\")} size=\"md\" color=\"warning\" className = \"basvuru-detay-submit-buttons-submit\" >\r\n          <i className=\"fas fa-arrow-circle-up\"></i> İŞLE</CButton>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n  const renderTextArea = (details) => {\r\n    if (details.submitProcessNum === 2) {\r\n      return (\r\n          <CFormGroup row>\r\n            <CCol>\r\n              <CLabel>Bayi Açıklaması</CLabel>\r\n              <CTextarea \r\n                rows=\"8\"\r\n                placeholder={userDetails.Açıklama}\r\n                readOnly\r\n              />\r\n            </CCol>\r\n            <CCol>\r\n              <CLabel>Önceki Notlarınız</CLabel>\r\n              <CTextarea\r\n                rows=\"8\"\r\n                placeholder={userDetails.salesRepDetails}\r\n                readOnly\r\n              />\r\n            </CCol>\r\n          </CFormGroup>\r\n      )\r\n    }\r\n    else if (details.submitProcessNum === 3) {\r\n      return (\r\n        <CFormGroup>\r\n          <CLabel>Bayi Açıklaması</CLabel>\r\n          <CTextarea \r\n            rows=\"4\"\r\n            placeholder={userDetails.Açıklama}\r\n            readOnly\r\n          />\r\n      </CFormGroup>\r\n      )\r\n    } else {\r\n      return (\r\n        <CFormGroup>\r\n          <CLabel>Bayi Açıklaması</CLabel>\r\n          <CTextarea \r\n            rows=\"4\"\r\n            placeholder={userDetails.Açıklama}\r\n            readOnly\r\n          />\r\n        </CFormGroup>\r\n      )\r\n    }\r\n  }\r\n\r\n  // UPDATE APPLICATION FETCH REQUEST\r\n  const updateApp = async (statusChange, sp = false) => {\r\n    let urlString\r\n    if (sp)\r\n      urlString= `/basvurular/${match.params.id}/sp`\r\n    else urlString= `/basvurular/${match.params.id}`\r\n    const res = await fetch(urlString, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'content-type': 'application/json',\r\n        'authorization' :`Bearer ${document.cookie.slice(8)}`\r\n      },\r\n      body: JSON.stringify({\r\n            salesRepDetails: sdDetay,\r\n            statusChange: statusChange\r\n            })\r\n    })\r\n    if (res.status === 200) {\r\n      await fetchData(setUserDetails)\r\n      setModalDetails(modalSuccess)\r\n      setModal(true)\r\n    } else {\r\n      setModalDetails(modalFailure)\r\n      setModal(true)\r\n    }\r\n  }\r\n  const setHeaderColor = (details) => {\r\n    switch (details.Statü) {\r\n      case \"İşleniyor\":\r\n        return \"rgb(214, 160, 11)\"\r\n      case \"İptal\":\r\n        return \"rgb(212, 69, 13)\"\r\n      case \"Onaylandı\":\r\n        return \"rgb(55, 150, 55)\"\r\n      default:\r\n        return \"rgb(120, 138, 151)\"\r\n    }\r\n  }\r\n  const [sdDetay, setSdDetay] = useState(\"\")\r\n  const modalSuccess = {\r\n    header: \"BAŞARILI\",\r\n    body: \"Başvurunuz başarıyla güncellenmiştir\",\r\n    color: \"success\"\r\n  }\r\n  const modalFailure = {\r\n    header: \"HATA\",\r\n    body: \"Bir hata olmuştur, lütfen sayfayı yenileyerek tekrar deneyin\",\r\n    color: \"danger\"\r\n  }\r\n  const [modal, setModal] = useState(false)\r\n  const [modalDetails, setModalDetails] = useState({})\r\n  const [userDetails, setUserDetails] = useState({})\r\n  const history = useHistory()\r\n  useEffect(() => {\r\n    fetchData(setUserDetails)\r\n    // eslint-disable-next-line\r\n  }, [])\r\n  return (\r\n    <CRow className = \"justify-content-center align-items-center\">\r\n      <Modal modalOn= {modal} setModal = {setModal} color = {modalDetails.color} header = {modalDetails.header} body = {modalDetails.body} />\r\n      <CCol xs=\"12\" sm=\"8\">\r\n        <CCard>\r\n          <CCardHeader className = \"basvuru-detay-header\" style = {{backgroundColor: setHeaderColor(userDetails)}}>\r\n            <h4>Başvuru Detay</h4>\r\n            <CCol sm = \"2\" className = \"basvuru-detay-header-buttonCol\">\r\n              <CButton active block color=\"secondary\" aria-pressed=\"true\" onClick = {() => {\r\n                history.push(\"/basvurular/goruntule\")\r\n              }}>Geri</CButton>\r\n            </CCol>\r\n          </CCardHeader>\r\n          <CCardBody className = \"basvuru-detay\" >\r\n            <CFormGroup row className=\"my-0\">\r\n              <CCol xs = \"12\" lg=\"2\">\r\n                <CFormGroup>\r\n                  <CLabel>ID</CLabel>\r\n                  <CInput placeholder= {userDetails.ID} readOnly />\r\n                </CFormGroup>\r\n              </CCol>\r\n              <CCol xs = \"12\" lg=\"10\">\r\n                <CFormGroup>\r\n                  <CLabel>İsim</CLabel>\r\n                  <CInput placeholder={userDetails.İsim} readOnly />\r\n                </CFormGroup>\r\n              </CCol>\r\n            </CFormGroup>\r\n            <CFormGroup row className=\"my-0\">\r\n              <CCol xs = \"12\" lg=\"2\">\r\n                <CFormGroup>\r\n                  <CLabel>Statü</CLabel>\r\n                  <CInput placeholder= {userDetails.Statü} readOnly />\r\n                </CFormGroup>\r\n              </CCol>\r\n              <CCol xs = \"12\" lg=\"2\">\r\n                <CFormGroup>\r\n                  <CLabel>Tarih</CLabel>\r\n                  <CInput placeholder= {userDetails.Tarih} readOnly />\r\n                </CFormGroup>\r\n              </CCol>\r\n              <CCol xs = \"12\" lg=\"2\">\r\n                <CFormGroup>\r\n                  <CLabel>Hizmet</CLabel>\r\n                  <CInput placeholder={userDetails.Tip} readOnly />\r\n                </CFormGroup>\r\n              </CCol>\r\n              <CCol xs = \"12\" lg=\"6\">\r\n                <CFormGroup>\r\n                  <CLabel>Kampanya</CLabel>\r\n                  <CInput placeholder={userDetails.Kampanya} readOnly />\r\n                </CFormGroup>\r\n              </CCol>\r\n            </CFormGroup>\r\n            {renderTextArea(userDetails)}\r\n            {\r\n              userDetails.submitProcessNum === 3 ?\r\n              <CFormGroup>\r\n                <CLabel>Son notlarınız</CLabel>\r\n                  <CTextarea \r\n                    rows=\"6\"\r\n                    placeholder={userDetails.finalSalesRepDetails}\r\n                    readOnly\r\n                  />\r\n              </CFormGroup>\r\n              :\r\n              <CFormGroup>\r\n                <CLabel>Notlarınız</CLabel>\r\n                  <CTextarea \r\n                    rows=\"6\"\r\n                    placeholder=\"işlemle alakalı notlarınız...\"\r\n                    onChange = {(e) => setSdDetay(e.target.value)}\r\n                  />\r\n              </CFormGroup>\r\n            }\r\n            <CFormGroup row className = \"justify-content-center\">\r\n              <CLabel>Başvuru resimler: </CLabel>\r\n            {\r\n                userDetails.imageURLS && userDetails.imageURLS.map ((elm, i) => {\r\n                  return (\r\n                    <CCol md=\"3\" key = {i}>\r\n                      <a href = {elm} target = \"_blank\" rel = \"noreferrer\" >\r\n                        <img alt = \"\" style = {{maxWidth: \"200px\", maxHeight: \"200px\", cursor: \"pointer\"}}\r\n                        src = {elm} \r\n                        />\r\n                      </a>\r\n                    </CCol>\r\n                  )\r\n                })\r\n              }\r\n            </CFormGroup>\r\n            <CFormGroup row className = \"basvuru-detay-submit-buttons my-0\" >\r\n              <CCol lg = \"4\">\r\n                {renderBasvuruDetayFooter(userDetails)}\r\n              </CCol>\r\n            </CFormGroup>\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n  </CRow>\r\n  )\r\n}\r\n\r\nexport default BasvuruDetay"],"sourceRoot":""}
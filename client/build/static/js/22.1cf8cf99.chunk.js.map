{"version":3,"sources":["views/hocloader/HocLoader.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","components/toaster/Toaster2.js","views/hizmetler/index.js","views/hizmetler/Hizmetler.js"],"names":["HocLoader","props","absolute","className","isLoading","role","children","relative","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","Toaster","i","color","body","position","show","autohide","fade","successObj","errorObj","ModifyOffer","offer","setModal","toasters","triggerToaster","refetch","useState","offerDetails","setOfferDetails","kampanya_ismi","newName","setNewName","değeri","newValue","setNewValue","kampanya_açıklaması","newDescription","setNewDescription","buttonDisabled","setButtonDisabled","loading","setLoading","verifyInputFields","changesArr","Number","reSetSelectedOffer","offerID","offersData","find","obj","offer_id","a","fetch","method","headers","document","cookie","slice","JSON","stringify","newOfferName","status","element","textObj","handleNameUpdate","service_id","handleDescriptionUpdate","newOfferDescription","handleValueUpdate","newOfferValue","verifyFields","handleChangeFunctions","length","then","data","selectedOffer","useEffect","size","onClose","centered","closeButton","xs","sm","row","lg","defaultValue","onChange","e","target","value","type","rows","onClick","disabled","ConfirmDeleteModal","modalOn","serviceID","confirmDelete","style","textAlign","matchServiceWithServicesData","servicesData","ModifyService","service","serviceData","setServiceData","name","newServiceName","setNewServiceName","description","newServiceDescription","setNewServiceDescription","AddService","services","undefined","isProfitable","setIsProfitable","nameFieldInvalid","setNameFieldInvalid","trim","resetInput","invalid","placeholder","variant","id","htmlFor","fontSize","AddOffer","offers","setNewOfferName","setNewOfferDescription","setNewOfferValue","forServiceID","fields","key","_style","width","label","sorter","filter","Hizmetler","servicesLoading","setServicesLoading","setServicesData","selectedService","setSelectedService","selectedServiceObj","setSelectedServiceObj","offersLoading","setOffersLoading","setOffersData","setSelectedOffer","addToaster","confirmDeleteServiceModal","setConfirmDeleteServiceModal","modifyOffer","setModifyOffer","modifyServiceModal","setModifyServiceModal","addServiceModal","setAddServiceModal","addOfferModal","setAddOfferModal","fetchServices","res","json","fetchedData","fetchOffers","mappedData","map","aktif","active","toaster","md","shape","items","hover","scopedSlots","item","index","React","memo"],"mappings":"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","file":"static/js/22.1cf8cf99.chunk.js","sourcesContent":["import \"./loader.css\"\r\n\r\nconst HocLoader = (props) => {\r\n    if (props.absolute)\r\n      return (\r\n        <div >\r\n          <div className={ props.isLoading ? \"loader loader-absolute\" : \"\"}>\r\n            <div className={ props.isLoading ? \"spinner-border\" : \"\"} role=\"status\">\r\n              {/* <span className=\"sr-only loader-icon\">Loading...</span> */}\r\n            </div>\r\n          </div>\r\n          {\r\n            props.children\r\n          }\r\n        </div>\r\n      )\r\n    else if (props.relative)\r\n      return (\r\n        <div className = \"relativePosition\">\r\n          <div className={ props.isLoading ? \"loader loader-relative\" : \"\"}>\r\n            <div className={ props.isLoading ? \"spinner-border\" : \"\"} role=\"status\">\r\n              {/* <span className=\"sr-only loader-icon\">Loading...</span> */}\r\n            </div>\r\n          </div>\r\n          {\r\n            props.children\r\n          }\r\n        </div>\r\n      )\r\n}\r\n\r\nexport default HocLoader;","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import {\r\n    CToaster,\r\n    CToast,\r\n    CToastBody,\r\n} from '@coreui/react';\r\n\r\nconst Toaster = ({color, body}, i) => {\r\n    return (\r\n        <CToaster position=\"top-right\" key = {i}>\r\n            <CToast show={true} autohide={3000} fade={true} color={color} className = \"applicationToaster\">\r\n                <CToastBody>{body}</CToastBody>\r\n            </CToast>\r\n        </CToaster>\r\n    )\r\n}\r\n\r\nexport default Toaster","import {\r\n    CCol,\r\n    CRow,\r\n    CModal,\r\n    CModalTitle,\r\n    CModalHeader,\r\n    CModalBody,\r\n    CModalFooter,\r\n    CButton,\r\n    CFormGroup,\r\n    CLabel,\r\n    CInput,\r\n    CTextarea,\r\n    CInputRadio,\r\n    CInputGroupPrepend\r\n  } from '@coreui/react'\r\nimport { useEffect, useState } from 'react'\r\n\r\nimport Toaster from \"../../components/toaster/Toaster2\"\r\nimport HocLoader from '../hocloader/HocLoader'\r\n\r\nexport const successObj = {\r\n    color: \"success\",\r\n    body: \"Değişikleriniz başarıyla tamamlanmıştır!\"\r\n}\r\n\r\nexport const errorObj = {\r\n    color: \"danger\",\r\n    body: \"Bir hata oldu, lütfen daha sonra tekrar deneyin\"\r\n}\r\n\r\nexport const ModifyOffer = ({offer, show, setModal, toasters, triggerToaster, refetch}) => {\r\n    const [offerDetails, setOfferDetails] = useState(offer)\r\n    const [newName, setNewName] = useState(offer.kampanya_ismi)\r\n    const [newValue, setNewValue] = useState(offer.değeri)\r\n    const [newDescription, setNewDescription] = useState(offer.kampanya_açıklaması)\r\n    const [buttonDisabled, setButtonDisabled] = useState(true)\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    function verifyInputFields() {\r\n        let changesArr = [false, false, false]\r\n        if (newName !== offerDetails.kampanya_ismi)\r\n            changesArr[0] = true\r\n        else\r\n            changesArr[0] = false\r\n\r\n        if (newDescription !== offerDetails.kampanya_açıklaması)\r\n            changesArr[1] = true\r\n        else\r\n            changesArr[1] = false\r\n\r\n        if (Number(newValue) !== Number(offerDetails.değeri))\r\n            changesArr[2] = true\r\n        else\r\n            changesArr[2] = false\r\n\r\n        return changesArr\r\n    }\r\n\r\n    function reSetSelectedOffer(offerID, offersData) {\r\n        const selectedOffer = offersData.find(obj => obj.offer_id === offerID)\r\n        return selectedOffer\r\n    }\r\n\r\n    async function deleteOffer() {\r\n        const res = await fetch(`/offer/active?offerID=${offer.offer_id}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'authorization': `Bearer ${document.cookie.slice(8)} `\r\n            },\r\n            body: JSON.stringify({\r\n              newOfferName : newName\r\n            })\r\n      })\r\n      if (res.status === 200) {\r\n        refetch()\r\n        triggerToaster([...toasters, {element: Toaster, textObj: successObj}])\r\n      } else {\r\n        triggerToaster([...toasters, {element: Toaster, textObj: successObj}])\r\n      }\r\n      setModal(false)\r\n    }\r\n\r\n    async function handleSubmit() {\r\n        const handleNameUpdate = async () => {\r\n            const res = await fetch(`/offer/name?offerID=${offer.offer_id}&forServiceID=${offer.service_id}`, {\r\n                  method: 'PUT',\r\n                  headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'authorization': `Bearer ${document.cookie.slice(8)} `\r\n                  },\r\n                  body: JSON.stringify({\r\n                    newOfferName : newName\r\n                  })\r\n            })\r\n            if (res.status === 200)\r\n                return true\r\n            else\r\n                return false\r\n        }\r\n        const handleDescriptionUpdate = async () => {\r\n            const res = await fetch(`/offer/description?offerID=${offer.offer_id}&forServiceID=${offer.service_id}`, {\r\n                method: 'PUT',\r\n                  headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'authorization': `Bearer ${document.cookie.slice(8)} `\r\n                  },\r\n                  body: JSON.stringify({\r\n                    newOfferDescription: newDescription\r\n                  })\r\n                  \r\n            })\r\n            if (res.status === 200)\r\n                return true\r\n            else\r\n                return false\r\n        }\r\n        const handleValueUpdate = async () => {\r\n            const res = await fetch(`/offer/value?offerID=${offer.offer_id}&forServiceID=${offer.service_id}`, {\r\n                method: 'PUT',\r\n                  headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'authorization': `Bearer ${document.cookie.slice(8)} `\r\n                  },\r\n                  body: JSON.stringify({\r\n                    newOfferValue: newValue\r\n                  })\r\n            })\r\n            if (res.status === 200)\r\n                return true\r\n            else\r\n                return false\r\n        }\r\n        \r\n        const verifyFields = verifyInputFields()\r\n        const handleChangeFunctions = [handleNameUpdate, handleDescriptionUpdate, handleValueUpdate]\r\n        setLoading(true)        \r\n        for (let i = 0; i < verifyFields.length; i++) {\r\n            if (verifyFields[i]) {\r\n                const res = await handleChangeFunctions[i]()\r\n                if (res)\r\n                    continue\r\n                else {\r\n                    setLoading(false)\r\n                    refetch().then((data) => {\r\n                        const selectedOffer = reSetSelectedOffer(offer.offer_id, data)\r\n                        setOfferDetails(selectedOffer)\r\n                        \r\n                    })\r\n                    return triggerToaster([...toasters, {element: Toaster, textObj: errorObj}])\r\n                }\r\n            }\r\n        }\r\n        setLoading(false)\r\n        refetch().then((data) => {\r\n            const selectedOffer = reSetSelectedOffer(offer.offer_id, data)\r\n            setOfferDetails(selectedOffer)\r\n            \r\n        })        \r\n        return triggerToaster([...toasters, {element: Toaster, textObj: successObj}])\r\n    }\r\n\r\n    useEffect(() => {\r\n        const verifyFields = verifyInputFields()\r\n        for (let i = 0; i < verifyFields.length; i++) {\r\n            if (verifyFields[i])\r\n                return setButtonDisabled(false)\r\n        }\r\n        return setButtonDisabled(true)\r\n        //eslint-disable-next-line\r\n    }, [newName, newValue, newDescription, offerDetails])\r\n    return (\r\n        <CModal \r\n        size = \"lg\"\r\n        show={show}\r\n        onClose={() => setModal(!show)}\r\n        centered\r\n        >\r\n            <HocLoader relative isLoading = {loading}>\r\n            <CModalHeader closeButton>\r\n                <CModalTitle> Kampanya detayı </CModalTitle>\r\n            </CModalHeader>\r\n            <CModalBody>\r\n                <CRow className = \"justify-content-center align-items-center\">\r\n                <CCol xs=\"12\" sm=\"11\">\r\n                    <CFormGroup row className=\"my-0\">\r\n                        <CCol xs = \"12\" lg=\"10\">\r\n                            <CFormGroup>\r\n                                <CLabel>Kampanya ismi</CLabel>\r\n                                <CInput defaultValue={offerDetails?.kampanya_ismi} onChange = {(e) => setNewName(e.target.value)} />\r\n                            </CFormGroup>\r\n                        </CCol>\r\n                        <CCol xs = \"12\" lg=\"2\">\r\n                            <CFormGroup>\r\n                                <CLabel>Değeri</CLabel>\r\n                                <CInput defaultValue= {offerDetails?.değeri} onChange = {(e) => setNewValue(Number(e.target.value))} type = \"number\" />\r\n                            </CFormGroup>\r\n                        </CCol>\r\n                    </CFormGroup>\r\n                    <CFormGroup>\r\n                        <CLabel>Kampanya Açıklaması</CLabel>\r\n                        <CTextarea\r\n                        onChange = {(e) => setNewDescription(e.target.value)}\r\n                        rows=\"6\"\r\n                        defaultValue = {offerDetails?.kampanya_açıklaması}\r\n                        />\r\n                    </CFormGroup>\r\n                </CCol>\r\n                </CRow>\r\n                <CButton color = \"danger\" onClick = {deleteOffer} >Kampanyayı sil</CButton>\r\n            </CModalBody>\r\n            <CModalFooter>\r\n                <CButton color = \"success\" disabled = {buttonDisabled} onClick = {handleSubmit} >Değiştir</CButton>\r\n                <CButton color=\"secondary\" onClick={() => setModal(!show)}>Kapat</CButton>\r\n            </CModalFooter>\r\n            </HocLoader>\r\n        </CModal>\r\n    )\r\n}\r\n\r\n\r\nexport const ConfirmDeleteModal = ({ modalOn, setModal, serviceID, toasters, triggerToaster, refetch }) => {\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    const confirmDelete = async () => {\r\n        setLoading(true)\r\n        const res = await fetch(`/service/active?serviceID=${serviceID}`, {\r\n              method: 'PUT',\r\n              headers: {\r\n                'Content-Type': 'application/json',\r\n                'authorization': `Bearer ${document.cookie.slice(8)} `\r\n              }\r\n        })\r\n        if (res.status === 200) {\r\n            triggerToaster([...toasters, {element: Toaster, textObj: successObj}])\r\n        } else {\r\n            triggerToaster([...toasters, {element: Toaster, textObj: errorObj}])\r\n        }\r\n        refetch()\r\n        setModal(false)\r\n        setLoading(false)\r\n    }\r\n    return (\r\n        <CModal \r\n        show={modalOn}\r\n        onClose={() => setModal(!modalOn)}\r\n        color=\"warning\"\r\n        centered\r\n        >   \r\n            <HocLoader relative isLoading = {loading} >\r\n                <CModalHeader closeButton>\r\n                    <CModalTitle> Dikkat </CModalTitle>\r\n                </CModalHeader>\r\n                <CModalBody>\r\n                    <h6 style = {{textAlign: \"center\"}}>Bu hizmeti silerseniz, bu hizmete ait olan kampanyaları silenecektir </h6>\r\n                    <h5 style = {{textAlign: \"center\"}}>Bu hizmeti silmek istediğinizden emin misiniz? </h5>\r\n                </CModalBody>\r\n                <CModalFooter>\r\n                    <CButton color=\"danger\" onClick={confirmDelete}>Onayla</CButton>\r\n                    <CButton color=\"secondary\" onClick={() => setModal(!modalOn)}>Kapat</CButton>\r\n                </CModalFooter>\r\n            </HocLoader>\r\n        </CModal>\r\n    )\r\n}\r\n\r\n\r\nfunction matchServiceWithServicesData(serviceID, servicesData) {\r\n    const selectedService = servicesData.find(obj => obj.service_id === Number(serviceID))\r\n    return selectedService\r\n}\r\n\r\nexport const ModifyService = ({ modalOn, setModal, service, toasters, triggerToaster, refetch }) => {\r\n    const [serviceData, setServiceData] = useState(service)\r\n    const [loading, setLoading] = useState(false)\r\n    const [newServiceName, setNewServiceName] = useState(serviceData.name)\r\n    const [newServiceDescription, setNewServiceDescription] = useState(serviceData.description)\r\n    const [buttonDisabled, setButtonDisabled] = useState(true)\r\n\r\n    function verifyInputFields() {\r\n        let changesArr = [false, false]\r\n        if (newServiceName !== serviceData.name)\r\n            changesArr[0] = true\r\n        else\r\n            changesArr[0] = false\r\n    \r\n        if (newServiceDescription !== serviceData.description)\r\n            changesArr[1] = true\r\n        else\r\n            changesArr[1] = false\r\n    \r\n        return changesArr\r\n    }\r\n\r\n    async function handleSubmit() {\r\n        const handleNameUpdate = async () => {\r\n            const res = await fetch(`/service/name?serviceID=${serviceData.service_id}`, {\r\n                  method: 'PUT',\r\n                  headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'authorization': `Bearer ${document.cookie.slice(8)} `\r\n                  },\r\n                  body: JSON.stringify({\r\n                    newServiceName\r\n                  })\r\n            })\r\n            if (res.status === 200)\r\n                return true\r\n            else\r\n                return false\r\n        }\r\n        const handleDescriptionUpdate = async () => {\r\n            const res = await fetch(`/service/description?serviceID=${serviceData.service_id}`, {\r\n                method: 'PUT',\r\n                  headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'authorization': `Bearer ${document.cookie.slice(8)} `\r\n                  },\r\n                  body: JSON.stringify({\r\n                    newServiceDescription\r\n                  })\r\n                  \r\n            })\r\n            if (res.status === 200)\r\n                return true\r\n            else\r\n                return false\r\n        }\r\n        const verifyFields = verifyInputFields()\r\n        const handleChangeFunctions = [handleNameUpdate, handleDescriptionUpdate]\r\n        setLoading(true)   \r\n        for (let i = 0; i < verifyFields.length; i++) {\r\n            if (verifyFields[i]) {\r\n                const res = await handleChangeFunctions[i]()\r\n                if (res)\r\n                    continue\r\n                else {\r\n                    setLoading(false)\r\n                    refetch().then(data => setServiceData(matchServiceWithServicesData(serviceData.service_id, data)))\r\n                    return triggerToaster([...toasters, {element: Toaster, textObj: errorObj}])\r\n                }\r\n            }\r\n        }\r\n        setLoading(false)\r\n        refetch().then(data => setServiceData(matchServiceWithServicesData(serviceData.service_id, data)))\r\n        return triggerToaster([...toasters, {element: Toaster, textObj: successObj}])\r\n    }\r\n\r\n    useEffect(() => {\r\n        const verifyFields = verifyInputFields()\r\n        for (let i = 0; i < verifyFields.length; i++) {\r\n            if (verifyFields[i] === true)\r\n                return setButtonDisabled(false)\r\n        }\r\n        return setButtonDisabled(true)\r\n        //eslint-disable-next-line\r\n    }, [newServiceName, newServiceDescription, serviceData])\r\n    return (\r\n        <CModal \r\n        // size = \"md\"\r\n        show={modalOn}\r\n        onClose={() => setModal(!modalOn)}\r\n        color=\"info\"\r\n        centered\r\n        >   \r\n            <HocLoader relative isLoading = {loading} >\r\n                <CRow>\r\n                    <CCol xs = \"12\" >\r\n                        <CModalHeader closeButton>\r\n                            <CModalTitle>Hizmet bilgileri </CModalTitle>\r\n                        </CModalHeader>\r\n                        <CModalBody>\r\n                            <CFormGroup row>\r\n                                <CCol xs = \"12\" lg=\"4\">\r\n                                    <CLabel>Hizmet adı</CLabel>\r\n                                </CCol>\r\n                                <CCol xs = \"12\" lg=\"8\">\r\n                                    <CInput defaultValue = {serviceData?.name} onChange = {e => setNewServiceName(e.target.value)} />\r\n                                </CCol>\r\n                            </CFormGroup>\r\n                            <CFormGroup row>\r\n                                <CCol xs = \"12\" lg=\"4\">\r\n                                    <CLabel>Hizmet açıklaması</CLabel>\r\n                                </CCol>\r\n                                <CCol xs = \"12\" lg=\"8\">\r\n                                    <CTextarea\r\n                                        defaultValue = {serviceData?.description}\r\n                                        onChange = {e => setNewServiceDescription(e.target.value)}\r\n                                        rows = \"6\"\r\n                                    />\r\n                                </CCol>\r\n                            </CFormGroup>\r\n                        </CModalBody>\r\n                        <CModalFooter>\r\n                            <CButton disabled = {buttonDisabled} color=\"warning\" onClick={handleSubmit}>Değiştir</CButton>\r\n                            <CButton color=\"secondary\" onClick={() => setModal(!modalOn)}>Kapat</CButton>\r\n                        </CModalFooter>\r\n                    </CCol>\r\n                </CRow>\r\n            </HocLoader>\r\n        </CModal>\r\n    )\r\n}\r\n\r\nexport const AddService = ({ modalOn, setModal, toasters, triggerToaster, refetch, services }) => {\r\n    const [loading, setLoading] = useState(false)\r\n    const [newServiceName, setNewServiceName] = useState(\"\")\r\n    const [newServiceDescription, setNewServiceDescription] = useState(\"\")\r\n    const [isProfitable, setIsProfitable] = useState(undefined)\r\n    const [buttonDisabled, setButtonDisabled] = useState(true)\r\n    const [nameFieldInvalid, setNameFieldInvalid] = useState(undefined)\r\n\r\n    function verifyNameDoesntExist() {\r\n        if (services.find(obj => obj.name === newServiceName)) {\r\n            setNameFieldInvalid(true)\r\n            return false\r\n        }\r\n        setNameFieldInvalid(false)\r\n        return true\r\n    }\r\n\r\n    function verifyInputFields() {\r\n        let changesArr = [false, false, false]\r\n        if (newServiceName.trim() !== \"\" && verifyNameDoesntExist() !== false )\r\n            changesArr[0] = true\r\n        else\r\n            changesArr[0] = false\r\n    \r\n        if (newServiceDescription.trim() !== \"\")\r\n            changesArr[1] = true\r\n        else\r\n            changesArr[1] = false\r\n        \r\n        if (isProfitable !== undefined)\r\n            changesArr[2] = true\r\n        else\r\n            changesArr[2] = false\r\n\r\n        return changesArr\r\n    }\r\n\r\n    function resetInput() {\r\n        setNewServiceName(\"\")\r\n        setNewServiceDescription(\"\")\r\n        setIsProfitable(undefined)\r\n        setButtonDisabled(true)\r\n        setNameFieldInvalid(undefined)\r\n    }\r\n\r\n    async function handleSubmit() {\r\n        setLoading(true) \r\n        const res = await fetch(`/service`, {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'authorization': `Bearer ${document.cookie.slice(8)} `\r\n            },\r\n            body: JSON.stringify({\r\n              newServiceName,\r\n              newServiceDescription,\r\n              isProfitable\r\n            })\r\n        })\r\n        if (res.status === 200) {\r\n            triggerToaster([...toasters, {element: Toaster, textObj: successObj}])\r\n            resetInput()\r\n            setModal(false)\r\n        } else {\r\n            triggerToaster([...toasters, {element: Toaster, textObj: errorObj}])\r\n        }\r\n        setLoading(false)\r\n        refetch()\r\n    }\r\n\r\n    useEffect(() => {\r\n        const verifyFields = verifyInputFields()\r\n        for (let i = 0; i < verifyFields.length; i++) {\r\n            if (verifyFields[i] === false)\r\n                return setButtonDisabled(true)\r\n        }\r\n        return setButtonDisabled(false)\r\n        //eslint-disable-next-line\r\n    }, [newServiceName, newServiceDescription, isProfitable])\r\n    return (\r\n        <CModal\r\n        size = \"lg\"\r\n        show={modalOn}\r\n        onClose={() => setModal(!modalOn)}\r\n        color=\"success\"\r\n        centered\r\n        >   \r\n            <HocLoader relative isLoading = {loading} >\r\n                <CRow>\r\n                    <CCol xs = \"12\" >\r\n                        <CModalHeader closeButton>\r\n                            <CModalTitle>Hizmet Ekle </CModalTitle>\r\n                        </CModalHeader>\r\n                        <CModalBody>\r\n                            <CFormGroup row>\r\n                                <CCol xs = \"12\" lg=\"2\">\r\n                                    <CLabel>Hizmet adı</CLabel>\r\n                                </CCol>\r\n                                <CCol xs = \"12\" lg=\"4\">\r\n                                    <CInput invalid = {nameFieldInvalid} placeholder = \"Yeni hizmet adını giriniz\" value = {newServiceName} onChange = {e => setNewServiceName(e.target.value)} />\r\n                                </CCol>\r\n                                <CCol xs = \"12\" lg=\"6\">\r\n                                    <CRow>\r\n                                        <CCol xs = \"12\" lg=\"6\">\r\n                                            <CLabel>Kârlı mı</CLabel>\r\n                                        </CCol>\r\n                                        <CCol xs = \"12\" lg=\"6\">\r\n                                            <CFormGroup variant=\"checkbox\">\r\n                                                <CInputRadio className=\"form-check-input\" id=\"radio1\" name=\"radios\" value=\"true\" onClick = {(e) => setIsProfitable(e.target.value)} />\r\n                                                <CLabel variant=\"checkbox\" htmlFor=\"radio1\">Evet</CLabel>\r\n                                            </CFormGroup>\r\n                                            <CFormGroup variant=\"checkbox\">\r\n                                                <CInputRadio className=\"form-check-input\" id=\"radio2\" name=\"radios\" value=\"false\" onClick = {(e) => setIsProfitable(e.target.value)}/>\r\n                                                <CLabel variant=\"checkbox\" htmlFor=\"radio2\">Hayır</CLabel>\r\n                                            </CFormGroup>\r\n                                        </CCol>\r\n                                    </CRow>\r\n                                    <CInputGroupPrepend style = {{color: \"grey\", fontSize: \"0.85em\"}} >Bu hizmetten para kazanılır mı?</CInputGroupPrepend>\r\n                                </CCol>\r\n                            </CFormGroup>\r\n                            <CFormGroup row>\r\n                                <CCol xs = \"12\" lg=\"2\">\r\n                                    <CLabel>Hizmet açıklaması</CLabel>\r\n                                </CCol>\r\n                                <CCol xs = \"12\" lg=\"10\">\r\n                                    <CTextarea\r\n                                        value = {newServiceDescription}\r\n                                        placeholder = \"Hizmetin açıklamasını giriniz\"\r\n                                        onChange = {e => setNewServiceDescription(e.target.value)}\r\n                                        rows = \"6\"\r\n                                    />\r\n                                </CCol>\r\n                            </CFormGroup>\r\n                        </CModalBody>\r\n                        <CModalFooter>\r\n                            <CButton disabled = {buttonDisabled} color=\"success\" onClick={handleSubmit}>Hizmet ekle</CButton>\r\n                            <CButton color=\"secondary\" onClick={() =>{ setModal(!modalOn); resetInput()}}>Kapat</CButton>\r\n                        </CModalFooter>\r\n                    </CCol>\r\n                </CRow>\r\n            </HocLoader>\r\n        </CModal>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport const AddOffer = ({ modalOn, setModal, toasters, triggerToaster, refetch, offers, serviceID }) => {\r\n    const [loading, setLoading] = useState(false)\r\n    const [newOfferName, setNewOfferName] = useState(\"\")\r\n    const [newOfferDescription, setNewOfferDescription] = useState(\"\")\r\n    const [newOfferValue, setNewOfferValue] = useState(0)\r\n    const [buttonDisabled, setButtonDisabled] = useState(true)\r\n    const [nameFieldInvalid, setNameFieldInvalid] = useState(undefined)\r\n\r\n    function verifyNameDoesntExist() {\r\n        if (offers.find(obj => obj.kampanya_ismi === newOfferName)) {\r\n            setNameFieldInvalid(true)\r\n            return false\r\n        }\r\n        setNameFieldInvalid(false)\r\n        return true\r\n    }\r\n\r\n    function verifyInputFields() {\r\n        let changesArr = [false, false, false]\r\n        if (newOfferName.trim() !== \"\" && verifyNameDoesntExist() !== false )\r\n            changesArr[0] = true\r\n        else\r\n            changesArr[0] = false\r\n    \r\n        if (newOfferDescription.trim() !== \"\")\r\n            changesArr[1] = true\r\n        else\r\n            changesArr[1] = false\r\n        \r\n        if (Number(newOfferValue) >= 1)\r\n            changesArr[2] = true\r\n        else\r\n            changesArr[2] = false\r\n\r\n        return changesArr\r\n    }\r\n\r\n    function resetInput() {\r\n        setNewOfferName(\"\")\r\n        setNewOfferDescription(\"\")\r\n        setButtonDisabled(true)\r\n        setNameFieldInvalid(undefined)\r\n    }\r\n\r\n    async function handleSubmit() {\r\n        setLoading(true) \r\n        const res = await fetch(`/offer`, {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'authorization': `Bearer ${document.cookie.slice(8)} `\r\n            },\r\n            body: JSON.stringify({\r\n              newOfferName,\r\n              newOfferDescription,\r\n              newOfferValue,\r\n              forServiceID: serviceID\r\n            })\r\n        })\r\n        if (res.status === 200) {\r\n            triggerToaster([...toasters, {element: Toaster, textObj: successObj}])\r\n            resetInput()\r\n            setModal(false)\r\n        } else {\r\n            triggerToaster([...toasters, {element: Toaster, textObj: errorObj}])\r\n        }\r\n        setLoading(false)\r\n        refetch()\r\n    }\r\n\r\n    useEffect(() => {\r\n        const verifyFields = verifyInputFields()\r\n        for (let i = 0; i < verifyFields.length; i++) {\r\n            if (verifyFields[i] === false)\r\n                return setButtonDisabled(true)\r\n        }\r\n        return setButtonDisabled(false)\r\n        //eslint-disable-next-line\r\n    }, [newOfferName, newOfferDescription, newOfferValue])\r\n    return (\r\n        <CModal\r\n        size = \"lg\"\r\n        show={modalOn}\r\n        onClose={() => setModal(!modalOn)}\r\n        color=\"success\"\r\n        centered\r\n        >   \r\n            <HocLoader relative isLoading = {loading} >\r\n                <CRow>\r\n                    <CCol xs = \"12\" >\r\n                        <CModalHeader closeButton>\r\n                            <CModalTitle>Kampanya Ekle</CModalTitle>\r\n                        </CModalHeader>\r\n                        <CModalBody>\r\n                            <CFormGroup row>\r\n                                <CCol xs = \"12\" lg=\"2\">\r\n                                    <CLabel>Kampanya adı</CLabel>\r\n                                </CCol>\r\n                                <CCol xs = \"12\" lg=\"5\">\r\n                                    <CInput invalid = {nameFieldInvalid} placeholder = \"Yeni kampanya adını giriniz\" value = {newOfferName} onChange = {e => setNewOfferName(e.target.value)} />\r\n                                </CCol>\r\n                                <CCol xs = \"12\" lg=\"3\">\r\n                                    <CLabel>Kampanya Kârı</CLabel>\r\n                                </CCol>\r\n                                <CCol xs = \"12\" lg=\"\">\r\n                                    <CInput type = \"number\" placeholder = \"Bu kampanyadan ne kadar para kazanılır\" value = {newOfferValue} onChange = {e => setNewOfferValue(e.target.value)} />\r\n                                </CCol>\r\n                            </CFormGroup>\r\n                            <CFormGroup row>\r\n                                <CCol xs = \"12\" lg=\"2\">\r\n                                    <CLabel>Kampanya açıklaması</CLabel>\r\n                                </CCol>\r\n                                <CCol xs = \"12\" lg=\"10\">\r\n                                    <CTextarea\r\n                                        value = {newOfferDescription}\r\n                                        placeholder = \"Kampanyanın açıklamasını giriniz\"\r\n                                        onChange = {e => setNewOfferDescription(e.target.value)}\r\n                                        rows = \"6\"\r\n                                    />\r\n                                </CCol>\r\n                            </CFormGroup>\r\n                        </CModalBody>\r\n                        <CModalFooter>\r\n                            <CButton disabled = {buttonDisabled} color=\"success\" onClick={handleSubmit}>Kampanya ekle</CButton>\r\n                            <CButton color=\"secondary\" onClick={() =>{ setModal(!modalOn); resetInput()}}>Kapat</CButton>\r\n                        </CModalFooter>\r\n                    </CCol>\r\n                </CRow>\r\n            </HocLoader>\r\n        </CModal>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CCol,\r\n  CFormGroup,\r\n  CLabel,\r\n  CSelect,\r\n  CRow,\r\n  CDataTable,\r\n  CButton\r\n} from '@coreui/react';\r\nimport HocLoader from \"../hocloader/HocLoader\"\r\nimport { ModifyOffer, ConfirmDeleteModal, ModifyService, AddService, AddOffer } from '.';\r\n\r\nfunction mapOffersData(offers) {\r\n    return offers.map(obj => {\r\n        return {\r\n            kampanya_ismi: obj.name,\r\n            kampanya_açıklaması: obj.description,\r\n            değeri: `${obj.value}` ,\r\n            aktif: obj.active === true ? \"Evet\" : \"Hayır\",\r\n            offer_id: obj.offer_id,\r\n            service_id: obj.service_id\r\n        }\r\n    })\r\n}\r\n\r\nfunction matchServiceWithServicesData(serviceID, servicesData) {\r\n    const selectedOffer = servicesData.find(obj => obj.service_id === Number(serviceID))\r\n    return selectedOffer\r\n}\r\n\r\nconst fields = [\r\n    { key: 'kampanya_ismi', _style: { width: '20%'} },\r\n    { key: 'kampanya_açıklaması', _style: { width: '20%'} },\r\n    { key: 'aktif', _style: { width: '20%'} },\r\n    { key: \"değeri\", _style: {width: '15%'}},\r\n    {\r\n      key: 'show_details',\r\n      label: '',\r\n      _style: { width: '1%' },\r\n      sorter: false,\r\n      filter: false\r\n    }\r\n  ]\r\n\r\nconst Hizmetler = () => {\r\n    const [servicesLoading, setServicesLoading] = useState(false)\r\n    const [servicesData, setServicesData] = useState([])\r\n    const [selectedService, setSelectedService] = useState(\"0\")\r\n    const [selectedServiceObj, setSelectedServiceObj] = useState({})\r\n\r\n    const [offersLoading, setOffersLoading] = useState(false)\r\n    const [offersData, setOffersData] = useState([])\r\n    const [selectedOffer, setSelectedOffer] = useState({})\r\n\r\n    const [toasters, addToaster] = useState([])\r\n\r\n    const [confirmDeleteServiceModal, setConfirmDeleteServiceModal] = useState(false)\r\n    const [modifyOffer, setModifyOffer] = useState(false)\r\n    const [modifyServiceModal, setModifyServiceModal] = useState(false)\r\n    const [addServiceModal, setAddServiceModal] = useState(false)\r\n    const [addOfferModal, setAddOfferModal] = useState(false)\r\n\r\n    const fetchServices = async () => {\r\n        setServicesLoading(true)\r\n        const res = await fetch(\"/services?active=true\", {\r\n            headers: {\r\n              'content-type': 'application/json',\r\n              'authorization' :`Bearer ${document.cookie.slice(8)} `\r\n            }\r\n        })\r\n        let data = []\r\n        if (res.status === 200) {\r\n            const fetchedData = await res.json()\r\n            setServicesData(fetchedData)\r\n            data = fetchedData\r\n        }\r\n        setServicesLoading(false)\r\n        return data\r\n    }\r\n    useEffect(() => {\r\n        fetchServices()\r\n        //eslint-disable-next-line\r\n    }, [])\r\n\r\n    const fetchOffers = async () => {\r\n        setOffersLoading(true)\r\n        const res = await fetch(`/service/${selectedService}?active=true`, {\r\n            headers: {\r\n              'content-type': 'application/json',\r\n              'authorization' :`Bearer ${document.cookie.slice(8)} `\r\n            }\r\n        })\r\n        let data\r\n        if (res.status === 200) {\r\n            const fetchedData = await res.json()\r\n            const mappedData = mapOffersData(fetchedData)\r\n            setOffersData(mappedData)\r\n            data = mappedData\r\n        } else if (res.status === 406) {\r\n            setOffersData([])\r\n        }\r\n        setOffersLoading(false)\r\n        return data\r\n    }\r\n    useEffect(() => {\r\n        fetchOffers()\r\n        //eslint-disable-next-line\r\n    }, [selectedService])\r\n\r\n    const fetchAll = () => {\r\n        fetchServices()\r\n        fetchOffers()\r\n    }\r\n\r\n    return (\r\n        <CRow className=\"d-flex justify-content-center\">\r\n        {/* renders a toaster */}\r\n        {toasters && toasters.map((toaster, i) => ( toaster.element(toaster.textObj, i)))}\r\n        {   // EditingModal is responsible for updating an offer's details, such as name, description, value and active\r\n            modifyOffer && \r\n            <ModifyOffer show = {modifyOffer} setModal = {setModifyOffer} \r\n            offer = {selectedOffer} toasters = {toasters} triggerToaster = {addToaster} refetch = {fetchOffers} />\r\n        }\r\n        { // ConfirmDeleteModal is responsible for confirming a delete on a service. \r\n            selectedService !== \"0\" ?\r\n            <ConfirmDeleteModal \r\n            modalOn = {confirmDeleteServiceModal} setModal = {setConfirmDeleteServiceModal} toasters = {toasters}  \r\n            refetch = {fetchAll} serviceID = {selectedService} triggerToaster = {addToaster} />\r\n            :\r\n            null\r\n        }\r\n        { // ModifyService modal is responsible for modifiyng a service's details, such as name and description\r\n            selectedService !== \"0\"?\r\n            <ModifyService modalOn = {modifyServiceModal} setModal = {setModifyServiceModal} service = {selectedServiceObj}\r\n            toasters = {toasters} triggerToaster = {addToaster} refetch = {fetchServices} />\r\n            :\r\n            null\r\n        }\r\n            <AddService modalOn = {addServiceModal} setModal = {setAddServiceModal} toasters = {toasters} triggerToaster = {addToaster} refetch = {fetchServices} services = {servicesData} />\r\n            <AddOffer modalOn = {addOfferModal} setModal = {setAddOfferModal} toasters = {toasters} triggerToaster = {addToaster} refetch = {fetchOffers} offers = {offersData} serviceID = {selectedService} />\r\n            <CCol xs=\"12\" md=\"12\">\r\n                <CCard>\r\n                    <CCardHeader className=\"basvuruFormHeader\">\r\n                        Hizmetler\r\n                    </CCardHeader>\r\n                    <CCardBody>\r\n                            <CFormGroup row >\r\n                                <CCol xs = \"12\" md = \"1\" >\r\n                                    <CLabel>Hizmet seçiniz:</CLabel>\r\n                                </CCol>\r\n                                <CCol xs = \"12\" md = \"2\">\r\n                                    <HocLoader isLoading = {servicesLoading} relative>\r\n                                        <CSelect onChange = {(e) =>{\r\n                                             setSelectedService( e.target.value); \r\n                                             setSelectedServiceObj(matchServiceWithServicesData(e.target.value, servicesData)) \r\n                                        }}>\r\n                                            <option value = {0} ></option>\r\n                                            {servicesData && servicesData.map((service) => (\r\n                                                <option key = {service.service_id} value = {service.service_id}>{service.name}</option>))}\r\n                                        </CSelect>\r\n                                    </HocLoader>\r\n                                </CCol>\r\n                                <CCol xs = \"4\" md = \"1\">\r\n                                    <CButton disabled = {selectedService === \"0\" ? true : false} color = \"danger\" shape = \"ghost\" onClick = {()=> setConfirmDeleteServiceModal(true)} >SİL</CButton>\r\n                                </CCol>\r\n                                <CCol xs = \"4\" md = \"2\">\r\n                                    <CButton disabled = {selectedService === \"0\" ? true : false} color = \"info\" shape = \"ghost\" onClick = {()=> setModifyServiceModal(true)} >Hizmet detayları</CButton>\r\n                                </CCol>\r\n                                <CCol xs = \"4\" md = \"2\">\r\n                                    <CButton color = \"success\" shape = \"ghost\" onClick = {()=> setAddServiceModal(true)} >Hizmet ekle</CButton>\r\n                                </CCol>\r\n                                <CCol xs = \"4\" md = \"2\">\r\n                                    <CButton disabled = {selectedService === \"0\" ? true : false} color = \"secondary\" shape = \"ghost\" onClick = {()=> setAddOfferModal(true)} >Kampanya ekle</CButton>\r\n                                </CCol>\r\n                            </CFormGroup>\r\n                            {/* if a service is selected, render the offers table */}\r\n                            {\r\n                                selectedService !== \"0\" ?\r\n                                    <CDataTable\r\n                                        items={offersData}\r\n                                        fields={fields}\r\n                                        loading = {offersLoading}\r\n                                        hover\r\n                                        scopedSlots = {{\r\n                                        'değeri':\r\n                                            (item)=>(\r\n                                            <td>\r\n                                                <p style = {{color: \"green\"}} >{item.değeri} TL</p>\r\n                                            </td>\r\n                                            ),\r\n                                        'show_details':\r\n                                            (item, index)=>{\r\n                                            return (\r\n                                            <td className=\"py-2\">\r\n                                                <CButton\r\n                                                    color=\"primary\"\r\n                                                    variant=\"outline\"\r\n                                                    shape=\"square\"\r\n                                                    size=\"sm\"\r\n                                                    onClick={() => {setSelectedOffer(item); setModifyOffer(true)}}\r\n                                                >\r\n                                                    Değiştir\r\n                                                </CButton>\r\n                                            </td>\r\n                                            )\r\n                                        }\r\n                                        }}\r\n                                    />\r\n                                    : null\r\n                            }\r\n                    </CCardBody>\r\n                    {/* <CCardFooter>\r\n                        <CButton type=\"submit\" size=\"sm\" color=\"primary\" onClick={onSubmit} disabled = {inputFieldsNotEmpty} ><CIcon name=\"cil-scrubber\" /> Gönder</CButton>\r\n                        <CButton type=\"reset\" size=\"sm\" color=\"danger\" onClick={resetInput}  ><CIcon name=\"cil-ban\" /> Resetle</CButton>\r\n                    </CCardFooter> */}\r\n                </CCard>\r\n            </CCol>\r\n        </CRow>\r\n    )\r\n}\r\n\r\n\r\nexport default React.memo(Hizmetler)"],"sourceRoot":""}
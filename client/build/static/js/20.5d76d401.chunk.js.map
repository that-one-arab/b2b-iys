{"version":3,"sources":["components/index.js","views/rapor/index.js","views/rapor/Rapor.js"],"names":["mapDataToTurkish","fetchData","map","obj","submitDate","Date","submit_time","statusChangeDate","status_change_date","lastChangeDate","last_change_date","submitProcessNum","status","ID","id","İsim","client_name","Tarih","toISOString","slice","Hizmet","service_name","Kampanya","offer_name","Açıklama","description","Statü","salesRepDetails","sales_rep_details","finalSalesRepDetails","final_sales_rep_details","imageURLS","image_urls","getBadge","mapRoleToTurkish","switchRaporHeader","queryParam","Rapor","match","location","history","useHistory","queryPage","useLocation","search","currentPage","Number","useState","page","setPage","loading","setLoading","undefined","usersData","setUsersData","qsQuery","qs","parse","qsQueryString","queryObj","url","key","removeLastAndChar","charAt","substr","returnRaporQueryString","useEffect","a","fetch","method","headers","document","cookie","res","json","mappedData","className","xl","overTableSlot","color","onClick","excelData","JSON","stringify","forEach","arrOfArrs","i","length","Object","values","unshift","ws","XLSX","utils","aoa_to_sheet","wb","book_new","book_append_sheet","writeFile","exportFile","sorter","items","fields","_classes","tableFilter","hover","striped","itemsPerPage","activePage","clickableRows","onRowClick","item","push","scopedSlots","onActivePageChange","newPage","pages","doubleArrows","align"],"mappings":"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","file":"static/js/20.5d76d401.chunk.js","sourcesContent":["export const mapDataToTurkish = (fetchData) => {\r\n    return fetchData.map(obj => {\r\n        let submitDate = new Date(obj.submit_time)\r\n        let statusChangeDate = new Date(obj.status_change_date)\r\n        let lastChangeDate = new Date(obj.last_change_date)\r\n        let submitProcessNum = 0\r\n        let status = \"\"\r\n        if (obj.status === \"approved\") {\r\n          submitProcessNum = 3\r\n          status = \"Onaylandı\"\r\n        }\r\n        else if (obj.status === \"rejected\") {\r\n          submitProcessNum = 3\r\n          status = \"İptal\"\r\n        }\r\n        else if (obj.status === \"processing\") {\r\n          submitProcessNum = 2\r\n          status = \"İşleniyor\"\r\n        }\r\n        else if (obj.status === \"sent\") {\r\n          status = \"Gönderildi\"\r\n          submitProcessNum = 1\r\n        }\r\n        return {\r\n            ID: obj.id,\r\n            İsim: obj.client_name,\r\n            Tarih: submitDate.toISOString().slice(0, 10),\r\n            Hizmet: obj.service_name,\r\n            Kampanya: obj.offer_name,\r\n            Açıklama: obj.description,\r\n            Statü: status,\r\n            salesRepDetails: obj.sales_rep_details ? obj.sales_rep_details : \"\",\r\n            statusChangeDate: statusChangeDate ? statusChangeDate.toISOString().slice(0, 10) : null,\r\n            finalSalesRepDetails: obj.final_sales_rep_details ? obj.final_sales_rep_details : \"\",\r\n            lastChangeDate: lastChangeDate ? lastChangeDate.toISOString().slice(0, 10) : null,\r\n            submitProcessNum,\r\n            imageURLS: obj.image_urls ? obj.image_urls : null\r\n          }\r\n      })\r\n}\r\n\r\nexport const getBadge = (status)=>{\r\n    switch (status) {\r\n       case 'Onaylandı': return 'success'\r\n       case 'İşleniyor': return 'warning'\r\n       case 'İptal': return 'danger'\r\n       case 'Gönderildi': return 'secondary'\r\n       default: return 'primary'\r\n    }\r\n  }\r\n\r\nexport const mapRoleToTurkish = (status)=>{\r\n  switch (status) {\r\n      case 'dealer': return 'Bayi'\r\n      case 'sales_assistant': return 'Satış Destek'\r\n      case 'sales_assistant_chef': return 'Satış Destek Şefi'\r\n      case 'admin': return 'Admin'\r\n      default: return ''\r\n  }\r\n}","export const switchRaporHeader = (queryParam) => {\r\n    switch (queryParam) {\r\n        case \"approved\":\r\n            return \"onaylanan\"\r\n        case \"rejected\":\r\n            return \"iptal edilen\"\r\n        case \"processing\":\r\n            return \"beklemede olan\"\r\n        default:\r\n            break;\r\n    }\r\n}","import React, { useState, useEffect } from 'react'\r\nimport { useHistory, useLocation } from 'react-router-dom'\r\nimport qs from \"qs\"\r\nimport {\r\n  CBadge,\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CCol,\r\n  CDataTable,\r\n  CRow,\r\n  CPagination,\r\n  CButton\r\n} from '@coreui/react'\r\nimport XLSX from \"xlsx\";\r\nimport { getBadge, mapDataToTurkish } from '../../components'\r\nimport { switchRaporHeader } from \".\"\r\n\r\n// it returns a query string to allow for dynamic fetching from server\r\nconst returnRaporQueryString = (queryObj) => {\r\n  let url = \"\"\r\n  for (const key in queryObj) {\r\n      if (key === \"sayfa\" || key === \"?sayfa\" || key === \"q\" || key === \"?q\")\r\n        continue\r\n      else\r\n        url = url+key+\"=\"+queryObj[key]+\"&\"\r\n  }\r\n  let removeLastAndChar = url.slice(0, -1)\r\n  if (removeLastAndChar.charAt(0) === \"?\")\r\n    return removeLastAndChar.substr(1)\r\n\r\n  return removeLastAndChar\r\n}\r\n\r\nconst Rapor = ({match, location}) => {\r\n  const history = useHistory()\r\n  const queryPage = useLocation().search.match(/sayfa=([0-9]+)/, '')\r\n  const currentPage = Number(queryPage && queryPage[1] ? queryPage[1] : 1)\r\n  const [page, setPage] = useState(currentPage)\r\n  const [loading, setLoading] = useState(true)\r\n  const [usersData, setUsersData] = useState(undefined)\r\n  const qsQuery = qs.parse(location.search)\r\n  const qsQueryString = returnRaporQueryString(qsQuery)\r\n  const pageChange = newPage => {\r\n    currentPage !== newPage && history.push(`/bayi/islemler/rapor?sayfa=${newPage}&${qsQueryString}`)\r\n  }\r\n\r\n  const exportFile = () => {\r\n    let cols = [\"ID\", \"İsim\", \"Tarih\", \"Hizmet\", \"Kampanya\", \"Açıklama\", \"Statü\", \"S-D Açıklaması\", \"S-D Açıklama Tarihi\", \"S-D Son Açıklaması\", \"S-D Son Açıklama Tarihi\" ]\r\n    const excelData = JSON.parse(JSON.stringify(usersData));\r\n    excelData.forEach(obj => delete obj.submitProcessNum)\r\n    let arrOfArrs = []\r\n    for (let i = 0; i < excelData.length; i++) {\r\n        arrOfArrs[i] = Object.values(excelData[i])\r\n      }\r\n    arrOfArrs.unshift(cols)\r\n    const ws = XLSX.utils.aoa_to_sheet(arrOfArrs);\r\n    const wb = XLSX.utils.book_new();\r\n    XLSX.utils.book_append_sheet(wb, ws, \"Başvurular\");\r\n    XLSX.writeFile(wb, \"başvurular.xlsx\")\r\n  };\r\n  useEffect(() => {\r\n    currentPage !== page && setPage(currentPage)\r\n    const fetchData = async () => {\r\n      setLoading(true)\r\n      const url = `/applications/details/?${qsQueryString}`\r\n      const res = await fetch(url, {\r\n        method: 'GET',\r\n        headers: {\r\n          'content-type': 'application/json',\r\n          'authorization' :`Bearer ${document.cookie.slice(8)} `\r\n        }\r\n      })\r\n      if (res.status === 200) {\r\n        const fetchData = await res.json()\r\n        const mappedData = mapDataToTurkish(fetchData)\r\n        setUsersData(mappedData)\r\n      }\r\n      setLoading(false)\r\n    };\r\n    fetchData();\r\n    // eslint-disable-next-line\r\n  }, [qsQuery[\"?status\"], currentPage])\r\n\r\n  return (\r\n    <CRow className = \"d-flex justify-content-center\">\r\n      <CCol xl={10}>\r\n        <CCard>\r\n          <CCardHeader>\r\n            Raporunuz\r\n            <small className=\"text-muted\"> {switchRaporHeader(qsQuery[\"?status\"])} işlemler</small>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <CDataTable\r\n                overTableSlot = {<CButton color = \"primary\" onClick = {() => exportFile()}>Excele aktar</CButton>}\r\n                loading = {loading}\r\n                sorter\r\n                items={usersData}\r\n                fields={[\r\n                { key: 'İsim', _classes: 'font-weight-bold' },\r\n                'Tarih', 'Hizmet', 'Statü'\r\n                ]}\r\n                tableFilter\r\n                hover\r\n                striped\r\n                itemsPerPage={15}\r\n                activePage={page}\r\n                clickableRows\r\n                onRowClick={(item) => history.push(`/islem/${item.ID}`)}\r\n                scopedSlots = {{\r\n                'Statü':\r\n                    (item)=>(\r\n                    <td>\r\n                        <CBadge color={getBadge(item.Statü)}> \r\n                        {item.Statü}\r\n                        </CBadge>\r\n                    </td>\r\n                    )\r\n                }}\r\n            />\r\n            <CPagination\r\n                activePage={page}\r\n                onActivePageChange={pageChange}\r\n                pages={15}\r\n                doubleArrows={false} \r\n                align=\"center\"\r\n            />\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n    </CRow>\r\n  )\r\n}\r\n\r\nexport default Rapor;\r\n"],"sourceRoot":""}
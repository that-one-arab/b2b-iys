{"version":3,"sources":["views/rapor/KazancRapor.js"],"names":["Rapor","history","useHistory","queryPage","useLocation","search","match","currentPage","Number","useState","page","setPage","loading","setLoading","undefined","reportsData","setReportsData","useEffect","a","fetch","headers","document","cookie","slice","res","status","json","data","mapedDataToTUR","map","obj","rapor_id","report_id","toplam_kazanç","transaction_total","tarih","date","fetchData","className","xl","sorter","items","tableFilter","hover","striped","itemsPerPage","activePage","clickableRows","onRowClick","item","push","scopedSlots","style","color","fontSize","toFixed","onActivePageChange","newPage","pages","doubleArrows","align"],"mappings":"2KA8GeA,UAjGD,WACZ,IAAMC,EAAUC,cACVC,EAAYC,cAAcC,OAAOC,MAAM,iBAAkB,IACzDC,EAAcC,OAAOL,GAAaA,EAAU,GAAKA,EAAU,GAAK,GACtE,EAAwBM,mBAASF,GAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAAsCJ,wBAASK,GAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KA+CA,OA3BAC,qBAAU,WACRV,IAAgBG,GAAQC,EAAQJ,GACjB,uCAAG,gCAAAW,EAAA,6DAChBL,GAAW,GADK,SAEEM,MAAM,uBAAwB,CAC9CC,QAAS,CACP,eAAgB,mBAChB,+BAA2BC,SAASC,OAAOC,MAAM,GAAjD,QALY,UAQG,OANbC,EAFU,QAQRC,OARQ,iCASKD,EAAIE,OATT,OASRC,EATQ,OAURC,EAAiBD,EAAKE,KAAI,SAAAC,GAC9B,MAAO,CACLC,SAAUD,EAAIE,UACdC,mBAAeH,EAAII,kBACnBC,MAAOL,EAAIM,KAAKb,MAAM,EAAG,QAG7BP,EAAeY,GAjBD,QAmBhBf,GAAW,GAnBK,4CAAH,oDAqBfwB,KAEC,CAAC9B,IAGF,cAAC,IAAD,CAAM+B,UAAY,gCAAlB,SACE,cAAC,IAAD,CAAMC,GAAI,GAAV,SACE,eAAC,IAAD,WACE,eAAC,IAAD,uBAEE,uBAAOD,UAAU,aAAjB,wCAEF,eAAC,IAAD,WACE,cAAC,IAAD,CAEI1B,QAAWA,EACX4B,QAAM,EACNC,MAAO1B,EACP2B,aAAW,EACXC,OAAK,EACLC,SAAO,EACPC,aAAc,GACdC,WAAYpC,EACZqC,eAAa,EACbC,WAAY,SAACC,GAAD,OAAUhD,EAAQiD,KAAR,mCAAyCD,EAAKlB,YACpEoB,YAAe,CACf,mBACI,SAACF,GAAD,OACA,6BACI,oBAAGG,MAAS,CAACC,MAAO,QAASC,SAAU,QAAvC,UAAiD9C,OAAOyC,EAAKhB,oBAAesB,QAAQ,GAApF,eAKZ,cAAC,IAAD,CACIT,WAAYpC,EACZ8C,mBA7EK,SAAAC,GACjBlD,IAAgBkD,GAAWxD,EAAQiD,KAAR,qCAA2CO,KA6E1DC,MAAO,GACPC,cAAc,EACdC,MAAM","file":"static/js/31.057d4a21.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { useHistory, useLocation } from 'react-router-dom'\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CCol,\r\n  CDataTable,\r\n  CRow,\r\n  CPagination\r\n} from '@coreui/react'\r\n// import XLSX from \"xlsx\";\r\n\r\nconst Rapor = () => {\r\n  const history = useHistory()\r\n  const queryPage = useLocation().search.match(/sayfa=([0-9]+)/, '')\r\n  const currentPage = Number(queryPage && queryPage[1] ? queryPage[1] : 1)\r\n  const [page, setPage] = useState(currentPage)\r\n  const [loading, setLoading] = useState(true)\r\n  const [reportsData, setReportsData] = useState(undefined)\r\n\r\n  const pageChange = newPage => {\r\n    currentPage !== newPage && history.push(`/bayi/islemler/rapor?sayfa=${newPage}`)\r\n  }\r\n\r\n  // const exportFile = () => {\r\n  //   let cols = [\"ID\", \"İsim\", \"Tarih\", \"Hizmet\", \"Kampanya\", \"Açıklama\", \"Statü\", \"S-D Açıklaması\", \"S-D Açıklama Tarihi\", \"S-D Son Açıklaması\", \"S-D Son Açıklama Tarihi\" ]\r\n  //   const excelData = JSON.parse(JSON.stringify(reportsData));\r\n  //   excelData.forEach(obj => delete obj.submitProcessNum)\r\n  //   let arrOfArrs = []\r\n  //   for (let i = 0; i < excelData.length; i++) {\r\n  //       arrOfArrs[i] = Object.values(excelData[i])\r\n  //     }\r\n  //   arrOfArrs.unshift(cols)\r\n  //   const ws = XLSX.utils.aoa_to_sheet(arrOfArrs);\r\n  //   const wb = XLSX.utils.book_new();\r\n  //   XLSX.utils.book_append_sheet(wb, ws, \"Başvurular\");\r\n  //   XLSX.writeFile(wb, \"başvurular.xlsx\")\r\n  // };\r\n  useEffect(() => {\r\n    currentPage !== page && setPage(currentPage)\r\n    const fetchData = async () => {\r\n      setLoading(true)\r\n      const res = await fetch(\"/report/transactions\", {\r\n        headers: {\r\n          'content-type': 'application/json',\r\n          'authorization' :`Bearer ${document.cookie.slice(8)} `\r\n        }\r\n      })\r\n      if (res.status === 200) {\r\n        const data = await res.json()\r\n        const mapedDataToTUR = data.map(obj => {\r\n          return {\r\n            rapor_id: obj.report_id,\r\n            toplam_kazanç: obj.transaction_total,\r\n            tarih: obj.date.slice(0, 10)\r\n          }\r\n        })\r\n        setReportsData(mapedDataToTUR)\r\n      }\r\n      setLoading(false)\r\n    };\r\n    fetchData();\r\n    // eslint-disable-next-line\r\n  }, [currentPage])\r\n\r\n  return (\r\n    <CRow className = \"d-flex justify-content-center\">\r\n      <CCol xl={10}>\r\n        <CCard>\r\n          <CCardHeader>\r\n            Kazanç\r\n            <small className=\"text-muted\"> raporlarınız</small>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <CDataTable\r\n                // overTableSlot = {<CButton color = \"primary\" onClick = {() => exportFile()}>Excele aktar</CButton>}\r\n                loading = {loading}\r\n                sorter\r\n                items={reportsData}\r\n                tableFilter\r\n                hover\r\n                striped\r\n                itemsPerPage={15}\r\n                activePage={page}\r\n                clickableRows\r\n                onRowClick={(item) => history.push(`/bayi/rapor/kazanc/detay/${item.rapor_id}`)}\r\n                scopedSlots = {{\r\n                'toplam_kazanç':\r\n                    (item)=>(\r\n                    <td>\r\n                        <p style = {{color: \"green\", fontSize: \"15px\"}}>{Number(item.toplam_kazanç).toFixed(2)} TL</p>\r\n                    </td>\r\n                    )\r\n                }}\r\n            />\r\n            <CPagination\r\n                activePage={page}\r\n                onActivePageChange={pageChange}\r\n                pages={15}\r\n                doubleArrows={false} \r\n                align=\"center\"\r\n            />\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n    </CRow>\r\n  )\r\n}\r\n\r\nexport default Rapor;\r\n"],"sourceRoot":""}
{"version":3,"sources":["hocloader/HocLoader.js","Modal.js","Toaster.js","ResetPasswordNew.js","App.js","reportWebVitals.js","index.js"],"names":["HocLoader","props","absolute","className","isLoading","role","children","relative","Modal","dispatch","show","on","onClose","type","payload","color","centered","closeButton","header","body","onClick","modalOn","setModal","style","textAlign","Toaster","position","autohide","fade","ResetPasswordNew","location","useLocation","modalErrorObj","modalSuccessObj","useState","password","setPassword","confirmPassword","setConfirmPassword","modal","setModalOn","toasters","addToaster","loading","setLoading","onPasswordSubmit","a","fetch","pathname","method","headers","JSON","stringify","res","status","useEffect","map","element","i","md","lg","xl","autoComplete","value","onChange","e","target","block","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ab741f2a.chunk.js","sourcesContent":["import \"./loader.css\"\r\n\r\nconst HocLoader = (props) => {\r\n    if (props.absolute)\r\n      return (\r\n        <div>\r\n          <div className={ props.isLoading ? \"loader loader-absolute\" : \"\"}>\r\n            <div className={ props.isLoading ? \"spinner-border\" : \"\"} role=\"status\">\r\n              {/* <span className=\"sr-only loader-icon\">Loading...</span> */}\r\n            </div>\r\n          </div>\r\n          {\r\n            props.children\r\n          }\r\n        </div>\r\n      )\r\n    else if (props.relative)\r\n      return (\r\n        <div className = \"relativePosition\">\r\n          <div className={ props.isLoading ? \"loader loader-relative\" : \"\"}>\r\n            <div className={ props.isLoading ? \"spinner-border\" : \"\"} role=\"status\">\r\n              {/* <span className=\"sr-only loader-icon\">Loading...</span> */}\r\n            </div>\r\n          </div>\r\n          {\r\n            props.children\r\n          }\r\n        </div>\r\n      )\r\n}\r\n\r\nexport default HocLoader;","import React from \"react\";\r\nimport { CModal, CModalHeader, CModalTitle, CModalFooter, CModalBody, CButton } from \"@coreui/react\"\r\n\r\nfunction Modal(props) {\r\n    if (props.dispatch) {\r\n        return (\r\n            <CModal \r\n            show={props.on} \r\n            onClose={() => props.dispatch({type : \"MODAL_DISPLAY\", payload: {type: \"CLOSE\"}})}\r\n            color={props.color}\r\n            centered\r\n            >\r\n                <CModalHeader closeButton>\r\n                    <CModalTitle> {props.header} </CModalTitle>\r\n                </CModalHeader>\r\n                <CModalBody>\r\n                    <h5>{props.body}</h5>\r\n                </CModalBody>\r\n                <CModalFooter>\r\n                    <CButton color=\"secondary\" onClick={() => props.dispatch({type : \"MODAL_DISPLAY\", payload: {type: \"CLOSE\"}})}>Kapat</CButton>\r\n                </CModalFooter>\r\n            </CModal>\r\n        )\r\n    } else {\r\n        return (\r\n            <CModal \r\n            show={props.modalOn}\r\n            onClose={() => props.setModal(!props.modalOn)}\r\n            color={props.color}\r\n            centered\r\n            >\r\n                <CModalHeader closeButton>\r\n                    <CModalTitle> {props.header} </CModalTitle>\r\n                </CModalHeader>\r\n                <CModalBody>\r\n                    <h5 style = {{textAlign: \"center\"}}>{props.body}</h5>\r\n                </CModalBody>\r\n                <CModalFooter>\r\n                    <CButton color=\"secondary\" onClick={() => props.setModal(!props.modalOn)}>Kapat</CButton>\r\n                </CModalFooter>\r\n            </CModal>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Modal","import { CToaster, CToast, CToastBody } from \"@coreui/react\"\r\n\r\nconst Toaster = ({color, body, show}) => {\r\n    return (\r\n        <CToaster position=\"top-right\">\r\n            <CToast show={show} autohide={3000} fade={true} color={color} style = {{textAlign: \"center\"}}>\r\n                <CToastBody>{body}</CToastBody>\r\n            </CToast>\r\n        </CToaster>\r\n    )\r\n}\r\n\r\nexport default Toaster","import React, { useState } from 'react'\r\nimport {\r\n  CButton,\r\n  CCard,\r\n  CCardBody,\r\n  CCol,\r\n  CContainer,\r\n  CForm,\r\n  CInput,\r\n  CInputGroup,\r\n  CInputGroupPrepend,\r\n  CInputGroupText,\r\n  CRow\r\n} from '@coreui/react'\r\nimport HocLoader from \"./hocloader/HocLoader\"\r\nimport Modal from './Modal'\r\nimport Toaster from './Toaster'\r\nimport { useEffect } from \"react\"\r\nimport { useLocation } from 'react-router-dom'\r\n\r\nconst ResetPasswordNew = () => {\r\n  const location = useLocation();\r\n  // console.log(location);\r\n  const unmatchedPassword = \"Şifreniz uyuşmuyor, lütfen şifrelerinizi kontrol edin\"\r\n  const modalErrorObj = {\r\n    header: \"HATA\",\r\n    body: \"Bilgileriniz kaydedilmedi, lütfen daha sonra tekrar deneyin\",\r\n    color: \"danger\"\r\n  }\r\n  const modalSuccessObj = {\r\n    header: \"BAŞARILI\",\r\n    body: \"Şifreniz başarıyla değiştirilmiştir\",\r\n    color: \"success\"\r\n  }\r\n  const [password, setPassword] = useState(\"\")\r\n  const [confirmPassword, setConfirmPassword] = useState(\"\")\r\n  const [modal, setModal] = useState({})\r\n  const [modalOn, setModalOn] = useState(false)\r\n  const [toasters, addToaster] = useState([])\r\n  const [loading, setLoading] = useState(false)\r\n\r\n  const verifyPassword = () => {\r\n    if (password !== confirmPassword) {\r\n      addToaster([\r\n        ...toasters,\r\n        {body: unmatchedPassword}\r\n      ])\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n\r\n  const onPasswordSubmit = async () => {\r\n    if (verifyPassword()) {\r\n      setLoading(true)\r\n      const res = await fetch(`http://localhost:8080${location.pathname}` , {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          password\r\n        })\r\n      })\r\n      setModalOn(true)\r\n      if (res.status === 200) {\r\n        setModal(modalSuccessObj)\r\n      } else {\r\n        setModal(modalErrorObj)\r\n      }\r\n    }\r\n    setLoading(false)\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const res = await fetch(`http://localhost:8080/resetpassword${location.pathname}` , {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          password\r\n        })\r\n      })\r\n      \r\n    }\r\n    // console.log(\"location\", location)\r\n  }, [])\r\n\r\n  return (\r\n        <HocLoader isLoading = {loading} absolute = {true} >\r\n    <div className=\"c-app c-default-layout flex-row align-items-center\">\r\n          <CContainer>\r\n              {\r\n                  toasters.map((element, i) => {\r\n                      return <Toaster key = {i} body = {element.body} show = {true} color = {\"danger\"} />\r\n                  })\r\n              }\r\n              <CRow className=\"justify-content-center\">\r\n                  <CCol md=\"9\" lg=\"7\" xl=\"6\">\r\n                  <CCard className=\"mx-4\">\r\n                      <CCardBody className=\"p-4\">\r\n                      <CForm>\r\n                          <div className = \"container\">\r\n                          <div className = \"row align-items-center justify-content-between\">\r\n                              <div className = \"col\">\r\n                              <h1>Yeni şifrenizi giriniz</h1>\r\n                              <p className=\"text-muted\">Aşağıdaki alanlara şifrenizi giriniz</p>\r\n                              </div>\r\n                          </div>\r\n                          </div>\r\n                          <CInputGroup className=\"mb-3\">\r\n                          <CInputGroupPrepend>\r\n                              <CInputGroupText>\r\n                                <i className=\"fas fa-lock\"></i>\r\n                              </CInputGroupText>\r\n                          </CInputGroupPrepend>\r\n                          <CInput type=\"password\" autoComplete=\"password\"\r\n                              value = {password}\r\n                              onChange = {(e) => setPassword(e.target.value)}\r\n                          />\r\n                          </CInputGroup>\r\n                          <CInputGroup className=\"mb-3\">\r\n                          <CInputGroupPrepend>\r\n                              <CInputGroupText>\r\n                                <i className=\"fas fa-lock\"></i>\r\n                              </CInputGroupText>\r\n                          </CInputGroupPrepend>\r\n                          <CInput type=\"password\" autoComplete=\"password\"\r\n                              value = {confirmPassword}\r\n                              onChange = {(e) => setConfirmPassword(e.target.value)}\r\n                          />\r\n                          </CInputGroup>\r\n                          <CButton color=\"success\" block onClick = {() => onPasswordSubmit()} >Şifre değiştir</CButton>\r\n                      </CForm>\r\n                      </CCardBody>\r\n                  </CCard>\r\n                  </CCol>\r\n              </CRow>\r\n              <Modal header = {modal.header} body = {modal.body} color = {modal.color} modalOn = {modalOn} setModal = {setModalOn}/>\r\n          </CContainer>\r\n    </div>\r\n        </HocLoader>\r\n  )\r\n}\r\n\r\nexport default ResetPasswordNew","import ResetPasswordNew from './ResetPasswordNew';\nimport 'core-js';\nimport './scss/style.scss';\nimport { Switch, BrowserRouter } from \"react-router-dom\"\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <ResetPasswordNew />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}